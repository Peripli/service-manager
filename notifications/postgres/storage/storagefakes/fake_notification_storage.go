// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/notifications/postgres/storage"
	"github.com/Peripli/service-manager/pkg/types"
)

type FakeNotificationStorage struct {
	GetLastRevisionStub        func(context.Context) (int64, error)
	getLastRevisionMutex       sync.RWMutex
	getLastRevisionArgsForCall []struct {
		arg1 context.Context
	}
	getLastRevisionReturns struct {
		result1 int64
		result2 error
	}
	getLastRevisionReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	GetNotificationStub        func(context.Context, string) (*types.Notification, error)
	getNotificationMutex       sync.RWMutex
	getNotificationArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getNotificationReturns struct {
		result1 *types.Notification
		result2 error
	}
	getNotificationReturnsOnCall map[int]struct {
		result1 *types.Notification
		result2 error
	}
	NewConnectionStub        func(func(isRunning bool, err error)) storage.NotificationConnection
	newConnectionMutex       sync.RWMutex
	newConnectionArgsForCall []struct {
		arg1 func(isRunning bool, err error)
	}
	newConnectionReturns struct {
		result1 storage.NotificationConnection
	}
	newConnectionReturnsOnCall map[int]struct {
		result1 storage.NotificationConnection
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotificationStorage) GetLastRevision(arg1 context.Context) (int64, error) {
	fake.getLastRevisionMutex.Lock()
	ret, specificReturn := fake.getLastRevisionReturnsOnCall[len(fake.getLastRevisionArgsForCall)]
	fake.getLastRevisionArgsForCall = append(fake.getLastRevisionArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetLastRevision", []interface{}{arg1})
	fake.getLastRevisionMutex.Unlock()
	if fake.GetLastRevisionStub != nil {
		return fake.GetLastRevisionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLastRevisionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotificationStorage) GetLastRevisionCallCount() int {
	fake.getLastRevisionMutex.RLock()
	defer fake.getLastRevisionMutex.RUnlock()
	return len(fake.getLastRevisionArgsForCall)
}

func (fake *FakeNotificationStorage) GetLastRevisionCalls(stub func(context.Context) (int64, error)) {
	fake.getLastRevisionMutex.Lock()
	defer fake.getLastRevisionMutex.Unlock()
	fake.GetLastRevisionStub = stub
}

func (fake *FakeNotificationStorage) GetLastRevisionArgsForCall(i int) context.Context {
	fake.getLastRevisionMutex.RLock()
	defer fake.getLastRevisionMutex.RUnlock()
	argsForCall := fake.getLastRevisionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNotificationStorage) GetLastRevisionReturns(result1 int64, result2 error) {
	fake.getLastRevisionMutex.Lock()
	defer fake.getLastRevisionMutex.Unlock()
	fake.GetLastRevisionStub = nil
	fake.getLastRevisionReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetLastRevisionReturnsOnCall(i int, result1 int64, result2 error) {
	fake.getLastRevisionMutex.Lock()
	defer fake.getLastRevisionMutex.Unlock()
	fake.GetLastRevisionStub = nil
	if fake.getLastRevisionReturnsOnCall == nil {
		fake.getLastRevisionReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.getLastRevisionReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetNotification(arg1 context.Context, arg2 string) (*types.Notification, error) {
	fake.getNotificationMutex.Lock()
	ret, specificReturn := fake.getNotificationReturnsOnCall[len(fake.getNotificationArgsForCall)]
	fake.getNotificationArgsForCall = append(fake.getNotificationArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetNotification", []interface{}{arg1, arg2})
	fake.getNotificationMutex.Unlock()
	if fake.GetNotificationStub != nil {
		return fake.GetNotificationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getNotificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotificationStorage) GetNotificationCallCount() int {
	fake.getNotificationMutex.RLock()
	defer fake.getNotificationMutex.RUnlock()
	return len(fake.getNotificationArgsForCall)
}

func (fake *FakeNotificationStorage) GetNotificationCalls(stub func(context.Context, string) (*types.Notification, error)) {
	fake.getNotificationMutex.Lock()
	defer fake.getNotificationMutex.Unlock()
	fake.GetNotificationStub = stub
}

func (fake *FakeNotificationStorage) GetNotificationArgsForCall(i int) (context.Context, string) {
	fake.getNotificationMutex.RLock()
	defer fake.getNotificationMutex.RUnlock()
	argsForCall := fake.getNotificationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNotificationStorage) GetNotificationReturns(result1 *types.Notification, result2 error) {
	fake.getNotificationMutex.Lock()
	defer fake.getNotificationMutex.Unlock()
	fake.GetNotificationStub = nil
	fake.getNotificationReturns = struct {
		result1 *types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetNotificationReturnsOnCall(i int, result1 *types.Notification, result2 error) {
	fake.getNotificationMutex.Lock()
	defer fake.getNotificationMutex.Unlock()
	fake.GetNotificationStub = nil
	if fake.getNotificationReturnsOnCall == nil {
		fake.getNotificationReturnsOnCall = make(map[int]struct {
			result1 *types.Notification
			result2 error
		})
	}
	fake.getNotificationReturnsOnCall[i] = struct {
		result1 *types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) NewConnection(arg1 func(isRunning bool, err error)) storage.NotificationConnection {
	fake.newConnectionMutex.Lock()
	ret, specificReturn := fake.newConnectionReturnsOnCall[len(fake.newConnectionArgsForCall)]
	fake.newConnectionArgsForCall = append(fake.newConnectionArgsForCall, struct {
		arg1 func(isRunning bool, err error)
	}{arg1})
	fake.recordInvocation("NewConnection", []interface{}{arg1})
	fake.newConnectionMutex.Unlock()
	if fake.NewConnectionStub != nil {
		return fake.NewConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newConnectionReturns
	return fakeReturns.result1
}

func (fake *FakeNotificationStorage) NewConnectionCallCount() int {
	fake.newConnectionMutex.RLock()
	defer fake.newConnectionMutex.RUnlock()
	return len(fake.newConnectionArgsForCall)
}

func (fake *FakeNotificationStorage) NewConnectionCalls(stub func(func(isRunning bool, err error)) storage.NotificationConnection) {
	fake.newConnectionMutex.Lock()
	defer fake.newConnectionMutex.Unlock()
	fake.NewConnectionStub = stub
}

func (fake *FakeNotificationStorage) NewConnectionArgsForCall(i int) func(isRunning bool, err error) {
	fake.newConnectionMutex.RLock()
	defer fake.newConnectionMutex.RUnlock()
	argsForCall := fake.newConnectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNotificationStorage) NewConnectionReturns(result1 storage.NotificationConnection) {
	fake.newConnectionMutex.Lock()
	defer fake.newConnectionMutex.Unlock()
	fake.NewConnectionStub = nil
	fake.newConnectionReturns = struct {
		result1 storage.NotificationConnection
	}{result1}
}

func (fake *FakeNotificationStorage) NewConnectionReturnsOnCall(i int, result1 storage.NotificationConnection) {
	fake.newConnectionMutex.Lock()
	defer fake.newConnectionMutex.Unlock()
	fake.NewConnectionStub = nil
	if fake.newConnectionReturnsOnCall == nil {
		fake.newConnectionReturnsOnCall = make(map[int]struct {
			result1 storage.NotificationConnection
		})
	}
	fake.newConnectionReturnsOnCall[i] = struct {
		result1 storage.NotificationConnection
	}{result1}
}

func (fake *FakeNotificationStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLastRevisionMutex.RLock()
	defer fake.getLastRevisionMutex.RUnlock()
	fake.getNotificationMutex.RLock()
	defer fake.getNotificationMutex.RUnlock()
	fake.newConnectionMutex.RLock()
	defer fake.newConnectionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotificationStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.NotificationStorage = new(FakeNotificationStorage)
