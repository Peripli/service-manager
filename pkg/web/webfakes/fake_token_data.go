// Code generated by counterfeiter. DO NOT EDIT.
package webfakes

import (
	sync "sync"

	web "github.com/Peripli/service-manager/pkg/web"
)

type FakeTokenData struct {
	ClaimsStub        func(interface{}) error
	claimsMutex       sync.RWMutex
	claimsArgsForCall []struct {
		arg1 interface{}
	}
	claimsReturns struct {
		result1 error
	}
	claimsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenData) Claims(arg1 interface{}) error {
	fake.claimsMutex.Lock()
	ret, specificReturn := fake.claimsReturnsOnCall[len(fake.claimsArgsForCall)]
	fake.claimsArgsForCall = append(fake.claimsArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Claims", []interface{}{arg1})
	fake.claimsMutex.Unlock()
	if fake.ClaimsStub != nil {
		return fake.ClaimsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.claimsReturns
	return fakeReturns.result1
}

func (fake *FakeTokenData) ClaimsCallCount() int {
	fake.claimsMutex.RLock()
	defer fake.claimsMutex.RUnlock()
	return len(fake.claimsArgsForCall)
}

func (fake *FakeTokenData) ClaimsCalls(stub func(interface{}) error) {
	fake.claimsMutex.Lock()
	defer fake.claimsMutex.Unlock()
	fake.ClaimsStub = stub
}

func (fake *FakeTokenData) ClaimsArgsForCall(i int) interface{} {
	fake.claimsMutex.RLock()
	defer fake.claimsMutex.RUnlock()
	argsForCall := fake.claimsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenData) ClaimsReturns(result1 error) {
	fake.claimsMutex.Lock()
	defer fake.claimsMutex.Unlock()
	fake.ClaimsStub = nil
	fake.claimsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTokenData) ClaimsReturnsOnCall(i int, result1 error) {
	fake.claimsMutex.Lock()
	defer fake.claimsMutex.Unlock()
	fake.ClaimsStub = nil
	if fake.claimsReturnsOnCall == nil {
		fake.claimsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.claimsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTokenData) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.claimsMutex.RLock()
	defer fake.claimsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenData) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ web.TokenData = new(FakeTokenData)
