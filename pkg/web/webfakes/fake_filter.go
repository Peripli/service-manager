// Code generated by counterfeiter. DO NOT EDIT.
package webfakes

import (
	"sync"

	"github.com/Peripli/service-manager/pkg/web"
)

type FakeFilter struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	RunStub        func(next web.Handler) web.Handler
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		next web.Handler
	}
	runReturns struct {
		result1 web.Handler
	}
	runReturnsOnCall map[int]struct {
		result1 web.Handler
	}
	FilterMatchersStub        func() []web.FilterMatcher
	filterMatchersMutex       sync.RWMutex
	filterMatchersArgsForCall []struct{}
	filterMatchersReturns     struct {
		result1 []web.FilterMatcher
	}
	filterMatchersReturnsOnCall map[int]struct {
		result1 []web.FilterMatcher
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilter) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeFilter) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeFilter) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilter) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilter) Run(next web.Handler) web.Handler {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		next web.Handler
	}{next})
	fake.recordInvocation("Run", []interface{}{next})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(next)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runReturns.result1
}

func (fake *FakeFilter) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeFilter) RunArgsForCall(i int) web.Handler {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].next
}

func (fake *FakeFilter) RunReturns(result1 web.Handler) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 web.Handler
	}{result1}
}

func (fake *FakeFilter) RunReturnsOnCall(i int, result1 web.Handler) {
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 web.Handler
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 web.Handler
	}{result1}
}

func (fake *FakeFilter) FilterMatchers() []web.FilterMatcher {
	fake.filterMatchersMutex.Lock()
	ret, specificReturn := fake.filterMatchersReturnsOnCall[len(fake.filterMatchersArgsForCall)]
	fake.filterMatchersArgsForCall = append(fake.filterMatchersArgsForCall, struct{}{})
	fake.recordInvocation("FilterMatchers", []interface{}{})
	fake.filterMatchersMutex.Unlock()
	if fake.FilterMatchersStub != nil {
		return fake.FilterMatchersStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.filterMatchersReturns.result1
}

func (fake *FakeFilter) FilterMatchersCallCount() int {
	fake.filterMatchersMutex.RLock()
	defer fake.filterMatchersMutex.RUnlock()
	return len(fake.filterMatchersArgsForCall)
}

func (fake *FakeFilter) FilterMatchersReturns(result1 []web.FilterMatcher) {
	fake.FilterMatchersStub = nil
	fake.filterMatchersReturns = struct {
		result1 []web.FilterMatcher
	}{result1}
}

func (fake *FakeFilter) FilterMatchersReturnsOnCall(i int, result1 []web.FilterMatcher) {
	fake.FilterMatchersStub = nil
	if fake.filterMatchersReturnsOnCall == nil {
		fake.filterMatchersReturnsOnCall = make(map[int]struct {
			result1 []web.FilterMatcher
		})
	}
	fake.filterMatchersReturnsOnCall[i] = struct {
		result1 []web.FilterMatcher
	}{result1}
}

func (fake *FakeFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.filterMatchersMutex.RLock()
	defer fake.filterMatchersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ web.Filter = new(FakeFilter)
