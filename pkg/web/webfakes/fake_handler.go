// Code generated by counterfeiter. DO NOT EDIT.
package webfakes

import (
	"sync"

	"github.com/Peripli/service-manager/pkg/web"
)

type FakeHandler struct {
	HandleStub        func(req *web.Request) (resp *web.Response, err error)
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		req *web.Request
	}
	handleReturns struct {
		result1 *web.Response
		result2 error
	}
	handleReturnsOnCall map[int]struct {
		result1 *web.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) Handle(req *web.Request) (resp *web.Response, err error) {
	fake.handleMutex.Lock()
	ret, specificReturn := fake.handleReturnsOnCall[len(fake.handleArgsForCall)]
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		req *web.Request
	}{req})
	fake.recordInvocation("Handle", []interface{}{req})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		return fake.HandleStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.handleReturns.result1, fake.handleReturns.result2
}

func (fake *FakeHandler) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeHandler) HandleArgsForCall(i int) *web.Request {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return fake.handleArgsForCall[i].req
}

func (fake *FakeHandler) HandleReturns(result1 *web.Response, result2 error) {
	fake.HandleStub = nil
	fake.handleReturns = struct {
		result1 *web.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) HandleReturnsOnCall(i int, result1 *web.Response, result2 error) {
	fake.HandleStub = nil
	if fake.handleReturnsOnCall == nil {
		fake.handleReturnsOnCall = make(map[int]struct {
			result1 *web.Response
			result2 error
		})
	}
	fake.handleReturnsOnCall[i] = struct {
		result1 *web.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ web.Handler = new(FakeHandler)
