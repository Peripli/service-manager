// Code generated by counterfeiter. DO NOT EDIT.
package envfakes

import (
	sync "sync"

	env "github.com/Peripli/service-manager/pkg/env"
	pflag "github.com/spf13/pflag"
)

type FakeEnvironment struct {
	BindPFlagStub        func(string, *pflag.Flag) error
	bindPFlagMutex       sync.RWMutex
	bindPFlagArgsForCall []struct {
		arg1 string
		arg2 *pflag.Flag
	}
	bindPFlagReturns struct {
		result1 error
	}
	bindPFlagReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(string) interface{}
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 interface{}
	}
	getReturnsOnCall map[int]struct {
		result1 interface{}
	}
	SetStub        func(string, interface{})
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 string
		arg2 interface{}
	}
	UnmarshalStub        func(interface{}) error
	unmarshalMutex       sync.RWMutex
	unmarshalArgsForCall []struct {
		arg1 interface{}
	}
	unmarshalReturns struct {
		result1 error
	}
	unmarshalReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnvironment) BindPFlag(arg1 string, arg2 *pflag.Flag) error {
	fake.bindPFlagMutex.Lock()
	ret, specificReturn := fake.bindPFlagReturnsOnCall[len(fake.bindPFlagArgsForCall)]
	fake.bindPFlagArgsForCall = append(fake.bindPFlagArgsForCall, struct {
		arg1 string
		arg2 *pflag.Flag
	}{arg1, arg2})
	fake.recordInvocation("BindPFlag", []interface{}{arg1, arg2})
	fake.bindPFlagMutex.Unlock()
	if fake.BindPFlagStub != nil {
		return fake.BindPFlagStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindPFlagReturns
	return fakeReturns.result1
}

func (fake *FakeEnvironment) BindPFlagCallCount() int {
	fake.bindPFlagMutex.RLock()
	defer fake.bindPFlagMutex.RUnlock()
	return len(fake.bindPFlagArgsForCall)
}

func (fake *FakeEnvironment) BindPFlagCalls(stub func(string, *pflag.Flag) error) {
	fake.bindPFlagMutex.Lock()
	defer fake.bindPFlagMutex.Unlock()
	fake.BindPFlagStub = stub
}

func (fake *FakeEnvironment) BindPFlagArgsForCall(i int) (string, *pflag.Flag) {
	fake.bindPFlagMutex.RLock()
	defer fake.bindPFlagMutex.RUnlock()
	argsForCall := fake.bindPFlagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEnvironment) BindPFlagReturns(result1 error) {
	fake.bindPFlagMutex.Lock()
	defer fake.bindPFlagMutex.Unlock()
	fake.BindPFlagStub = nil
	fake.bindPFlagReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEnvironment) BindPFlagReturnsOnCall(i int, result1 error) {
	fake.bindPFlagMutex.Lock()
	defer fake.bindPFlagMutex.Unlock()
	fake.BindPFlagStub = nil
	if fake.bindPFlagReturnsOnCall == nil {
		fake.bindPFlagReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindPFlagReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEnvironment) Get(arg1 string) interface{} {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1
}

func (fake *FakeEnvironment) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeEnvironment) GetCalls(stub func(string) interface{}) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeEnvironment) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEnvironment) GetReturns(result1 interface{}) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeEnvironment) GetReturnsOnCall(i int, result1 interface{}) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeEnvironment) Set(arg1 string, arg2 interface{}) {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 string
		arg2 interface{}
	}{arg1, arg2})
	fake.recordInvocation("Set", []interface{}{arg1, arg2})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		fake.SetStub(arg1, arg2)
	}
}

func (fake *FakeEnvironment) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeEnvironment) SetCalls(stub func(string, interface{})) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeEnvironment) SetArgsForCall(i int) (string, interface{}) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEnvironment) Unmarshal(arg1 interface{}) error {
	fake.unmarshalMutex.Lock()
	ret, specificReturn := fake.unmarshalReturnsOnCall[len(fake.unmarshalArgsForCall)]
	fake.unmarshalArgsForCall = append(fake.unmarshalArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Unmarshal", []interface{}{arg1})
	fake.unmarshalMutex.Unlock()
	if fake.UnmarshalStub != nil {
		return fake.UnmarshalStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unmarshalReturns
	return fakeReturns.result1
}

func (fake *FakeEnvironment) UnmarshalCallCount() int {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	return len(fake.unmarshalArgsForCall)
}

func (fake *FakeEnvironment) UnmarshalCalls(stub func(interface{}) error) {
	fake.unmarshalMutex.Lock()
	defer fake.unmarshalMutex.Unlock()
	fake.UnmarshalStub = stub
}

func (fake *FakeEnvironment) UnmarshalArgsForCall(i int) interface{} {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	argsForCall := fake.unmarshalArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEnvironment) UnmarshalReturns(result1 error) {
	fake.unmarshalMutex.Lock()
	defer fake.unmarshalMutex.Unlock()
	fake.UnmarshalStub = nil
	fake.unmarshalReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEnvironment) UnmarshalReturnsOnCall(i int, result1 error) {
	fake.unmarshalMutex.Lock()
	defer fake.unmarshalMutex.Unlock()
	fake.UnmarshalStub = nil
	if fake.unmarshalReturnsOnCall == nil {
		fake.unmarshalReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmarshalReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEnvironment) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindPFlagMutex.RLock()
	defer fake.bindPFlagMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEnvironment) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ env.Environment = new(FakeEnvironment)
