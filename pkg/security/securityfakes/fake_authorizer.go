// Code generated by counterfeiter. DO NOT EDIT.
package securityfakes

import (
	"net/http"
	"sync"

	"github.com/Peripli/service-manager/pkg/security"
)

type FakeAuthorizer struct {
	AuthorizeStub        func(req *http.Request) (security.Decision, error)
	authorizeMutex       sync.RWMutex
	authorizeArgsForCall []struct {
		req *http.Request
	}
	authorizeReturns struct {
		result1 security.Decision
		result2 error
	}
	authorizeReturnsOnCall map[int]struct {
		result1 security.Decision
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthorizer) Authorize(req *http.Request) (security.Decision, error) {
	fake.authorizeMutex.Lock()
	ret, specificReturn := fake.authorizeReturnsOnCall[len(fake.authorizeArgsForCall)]
	fake.authorizeArgsForCall = append(fake.authorizeArgsForCall, struct {
		req *http.Request
	}{req})
	fake.recordInvocation("Authorize", []interface{}{req})
	fake.authorizeMutex.Unlock()
	if fake.AuthorizeStub != nil {
		return fake.AuthorizeStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.authorizeReturns.result1, fake.authorizeReturns.result2
}

func (fake *FakeAuthorizer) AuthorizeCallCount() int {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	return len(fake.authorizeArgsForCall)
}

func (fake *FakeAuthorizer) AuthorizeArgsForCall(i int) *http.Request {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	return fake.authorizeArgsForCall[i].req
}

func (fake *FakeAuthorizer) AuthorizeReturns(result1 security.Decision, result2 error) {
	fake.AuthorizeStub = nil
	fake.authorizeReturns = struct {
		result1 security.Decision
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthorizer) AuthorizeReturnsOnCall(i int, result1 security.Decision, result2 error) {
	fake.AuthorizeStub = nil
	if fake.authorizeReturnsOnCall == nil {
		fake.authorizeReturnsOnCall = make(map[int]struct {
			result1 security.Decision
			result2 error
		})
	}
	fake.authorizeReturnsOnCall[i] = struct {
		result1 security.Decision
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthorizer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthorizer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ security.Authorizer = new(FakeAuthorizer)
