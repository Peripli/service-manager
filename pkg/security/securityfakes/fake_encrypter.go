// Code generated by counterfeiter. DO NOT EDIT.
package securityfakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/pkg/security"
)

type FakeEncrypter struct {
	EncryptStub        func(ctx context.Context, plaintext []byte) ([]byte, error)
	encryptMutex       sync.RWMutex
	encryptArgsForCall []struct {
		ctx       context.Context
		plaintext []byte
	}
	encryptReturns struct {
		result1 []byte
		result2 error
	}
	encryptReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	DecryptStub        func(ctx context.Context, ciphertext []byte) ([]byte, error)
	decryptMutex       sync.RWMutex
	decryptArgsForCall []struct {
		ctx        context.Context
		ciphertext []byte
	}
	decryptReturns struct {
		result1 []byte
		result2 error
	}
	decryptReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEncrypter) Encrypt(ctx context.Context, plaintext []byte) ([]byte, error) {
	var plaintextCopy []byte
	if plaintext != nil {
		plaintextCopy = make([]byte, len(plaintext))
		copy(plaintextCopy, plaintext)
	}
	fake.encryptMutex.Lock()
	ret, specificReturn := fake.encryptReturnsOnCall[len(fake.encryptArgsForCall)]
	fake.encryptArgsForCall = append(fake.encryptArgsForCall, struct {
		ctx       context.Context
		plaintext []byte
	}{ctx, plaintextCopy})
	fake.recordInvocation("Encrypt", []interface{}{ctx, plaintextCopy})
	fake.encryptMutex.Unlock()
	if fake.EncryptStub != nil {
		return fake.EncryptStub(ctx, plaintext)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.encryptReturns.result1, fake.encryptReturns.result2
}

func (fake *FakeEncrypter) EncryptCallCount() int {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	return len(fake.encryptArgsForCall)
}

func (fake *FakeEncrypter) EncryptArgsForCall(i int) (context.Context, []byte) {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	return fake.encryptArgsForCall[i].ctx, fake.encryptArgsForCall[i].plaintext
}

func (fake *FakeEncrypter) EncryptReturns(result1 []byte, result2 error) {
	fake.EncryptStub = nil
	fake.encryptReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeEncrypter) EncryptReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.EncryptStub = nil
	if fake.encryptReturnsOnCall == nil {
		fake.encryptReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.encryptReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeEncrypter) Decrypt(ctx context.Context, ciphertext []byte) ([]byte, error) {
	var ciphertextCopy []byte
	if ciphertext != nil {
		ciphertextCopy = make([]byte, len(ciphertext))
		copy(ciphertextCopy, ciphertext)
	}
	fake.decryptMutex.Lock()
	ret, specificReturn := fake.decryptReturnsOnCall[len(fake.decryptArgsForCall)]
	fake.decryptArgsForCall = append(fake.decryptArgsForCall, struct {
		ctx        context.Context
		ciphertext []byte
	}{ctx, ciphertextCopy})
	fake.recordInvocation("Decrypt", []interface{}{ctx, ciphertextCopy})
	fake.decryptMutex.Unlock()
	if fake.DecryptStub != nil {
		return fake.DecryptStub(ctx, ciphertext)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.decryptReturns.result1, fake.decryptReturns.result2
}

func (fake *FakeEncrypter) DecryptCallCount() int {
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	return len(fake.decryptArgsForCall)
}

func (fake *FakeEncrypter) DecryptArgsForCall(i int) (context.Context, []byte) {
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	return fake.decryptArgsForCall[i].ctx, fake.decryptArgsForCall[i].ciphertext
}

func (fake *FakeEncrypter) DecryptReturns(result1 []byte, result2 error) {
	fake.DecryptStub = nil
	fake.decryptReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeEncrypter) DecryptReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.DecryptStub = nil
	if fake.decryptReturnsOnCall == nil {
		fake.decryptReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.decryptReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeEncrypter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEncrypter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ security.Encrypter = new(FakeEncrypter)
