// Code generated by counterfeiter. DO NOT EDIT.
package httpfakes

import (
	httpa "net/http"
	"sync"

	"github.com/Peripli/service-manager/pkg/security/http"
	"github.com/Peripli/service-manager/pkg/web"
)

type FakeAuthenticator struct {
	AuthenticateStub        func(*httpa.Request) (*web.UserContext, http.Decision, error)
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct {
		arg1 *httpa.Request
	}
	authenticateReturns struct {
		result1 *web.UserContext
		result2 http.Decision
		result3 error
	}
	authenticateReturnsOnCall map[int]struct {
		result1 *web.UserContext
		result2 http.Decision
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthenticator) Authenticate(arg1 *httpa.Request) (*web.UserContext, http.Decision, error) {
	fake.authenticateMutex.Lock()
	ret, specificReturn := fake.authenticateReturnsOnCall[len(fake.authenticateArgsForCall)]
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct {
		arg1 *httpa.Request
	}{arg1})
	fake.recordInvocation("Authenticate", []interface{}{arg1})
	fake.authenticateMutex.Unlock()
	if fake.AuthenticateStub != nil {
		return fake.AuthenticateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.authenticateReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAuthenticator) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *FakeAuthenticator) AuthenticateCalls(stub func(*httpa.Request) (*web.UserContext, http.Decision, error)) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = stub
}

func (fake *FakeAuthenticator) AuthenticateArgsForCall(i int) *httpa.Request {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	argsForCall := fake.authenticateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthenticator) AuthenticateReturns(result1 *web.UserContext, result2 http.Decision, result3 error) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 *web.UserContext
		result2 http.Decision
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthenticator) AuthenticateReturnsOnCall(i int, result1 *web.UserContext, result2 http.Decision, result3 error) {
	fake.authenticateMutex.Lock()
	defer fake.authenticateMutex.Unlock()
	fake.AuthenticateStub = nil
	if fake.authenticateReturnsOnCall == nil {
		fake.authenticateReturnsOnCall = make(map[int]struct {
			result1 *web.UserContext
			result2 http.Decision
			result3 error
		})
	}
	fake.authenticateReturnsOnCall[i] = struct {
		result1 *web.UserContext
		result2 http.Decision
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthenticator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthenticator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ http.Authenticator = new(FakeAuthenticator)
