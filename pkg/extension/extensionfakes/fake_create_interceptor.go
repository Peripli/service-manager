// Code generated by counterfeiter. DO NOT EDIT.
package extensionfakes

import (
	"sync"

	"github.com/Peripli/service-manager/pkg/extension"
)

type FakeCreateInterceptor struct {
	OnAPICreateStub        func(h extension.InterceptCreateOnAPI) extension.InterceptCreateOnAPI
	onAPICreateMutex       sync.RWMutex
	onAPICreateArgsForCall []struct {
		h extension.InterceptCreateOnAPI
	}
	onAPICreateReturns struct {
		result1 extension.InterceptCreateOnAPI
	}
	onAPICreateReturnsOnCall map[int]struct {
		result1 extension.InterceptCreateOnAPI
	}
	OnTransactionCreateStub        func(f extension.InterceptCreateOnTransaction) extension.InterceptCreateOnTransaction
	onTransactionCreateMutex       sync.RWMutex
	onTransactionCreateArgsForCall []struct {
		f extension.InterceptCreateOnTransaction
	}
	onTransactionCreateReturns struct {
		result1 extension.InterceptCreateOnTransaction
	}
	onTransactionCreateReturnsOnCall map[int]struct {
		result1 extension.InterceptCreateOnTransaction
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateInterceptor) OnAPICreate(h extension.InterceptCreateOnAPI) extension.InterceptCreateOnAPI {
	fake.onAPICreateMutex.Lock()
	ret, specificReturn := fake.onAPICreateReturnsOnCall[len(fake.onAPICreateArgsForCall)]
	fake.onAPICreateArgsForCall = append(fake.onAPICreateArgsForCall, struct {
		h extension.InterceptCreateOnAPI
	}{h})
	fake.recordInvocation("OnAPICreate", []interface{}{h})
	fake.onAPICreateMutex.Unlock()
	if fake.OnAPICreateStub != nil {
		return fake.OnAPICreateStub(h)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.onAPICreateReturns.result1
}

func (fake *FakeCreateInterceptor) OnAPICreateCallCount() int {
	fake.onAPICreateMutex.RLock()
	defer fake.onAPICreateMutex.RUnlock()
	return len(fake.onAPICreateArgsForCall)
}

func (fake *FakeCreateInterceptor) OnAPICreateArgsForCall(i int) extension.InterceptCreateOnAPI {
	fake.onAPICreateMutex.RLock()
	defer fake.onAPICreateMutex.RUnlock()
	return fake.onAPICreateArgsForCall[i].h
}

func (fake *FakeCreateInterceptor) OnAPICreateReturns(result1 extension.InterceptCreateOnAPI) {
	fake.OnAPICreateStub = nil
	fake.onAPICreateReturns = struct {
		result1 extension.InterceptCreateOnAPI
	}{result1}
}

func (fake *FakeCreateInterceptor) OnAPICreateReturnsOnCall(i int, result1 extension.InterceptCreateOnAPI) {
	fake.OnAPICreateStub = nil
	if fake.onAPICreateReturnsOnCall == nil {
		fake.onAPICreateReturnsOnCall = make(map[int]struct {
			result1 extension.InterceptCreateOnAPI
		})
	}
	fake.onAPICreateReturnsOnCall[i] = struct {
		result1 extension.InterceptCreateOnAPI
	}{result1}
}

func (fake *FakeCreateInterceptor) OnTransactionCreate(f extension.InterceptCreateOnTransaction) extension.InterceptCreateOnTransaction {
	fake.onTransactionCreateMutex.Lock()
	ret, specificReturn := fake.onTransactionCreateReturnsOnCall[len(fake.onTransactionCreateArgsForCall)]
	fake.onTransactionCreateArgsForCall = append(fake.onTransactionCreateArgsForCall, struct {
		f extension.InterceptCreateOnTransaction
	}{f})
	fake.recordInvocation("OnTransactionCreate", []interface{}{f})
	fake.onTransactionCreateMutex.Unlock()
	if fake.OnTransactionCreateStub != nil {
		return fake.OnTransactionCreateStub(f)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.onTransactionCreateReturns.result1
}

func (fake *FakeCreateInterceptor) OnTransactionCreateCallCount() int {
	fake.onTransactionCreateMutex.RLock()
	defer fake.onTransactionCreateMutex.RUnlock()
	return len(fake.onTransactionCreateArgsForCall)
}

func (fake *FakeCreateInterceptor) OnTransactionCreateArgsForCall(i int) extension.InterceptCreateOnTransaction {
	fake.onTransactionCreateMutex.RLock()
	defer fake.onTransactionCreateMutex.RUnlock()
	return fake.onTransactionCreateArgsForCall[i].f
}

func (fake *FakeCreateInterceptor) OnTransactionCreateReturns(result1 extension.InterceptCreateOnTransaction) {
	fake.OnTransactionCreateStub = nil
	fake.onTransactionCreateReturns = struct {
		result1 extension.InterceptCreateOnTransaction
	}{result1}
}

func (fake *FakeCreateInterceptor) OnTransactionCreateReturnsOnCall(i int, result1 extension.InterceptCreateOnTransaction) {
	fake.OnTransactionCreateStub = nil
	if fake.onTransactionCreateReturnsOnCall == nil {
		fake.onTransactionCreateReturnsOnCall = make(map[int]struct {
			result1 extension.InterceptCreateOnTransaction
		})
	}
	fake.onTransactionCreateReturnsOnCall[i] = struct {
		result1 extension.InterceptCreateOnTransaction
	}{result1}
}

func (fake *FakeCreateInterceptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onAPICreateMutex.RLock()
	defer fake.onAPICreateMutex.RUnlock()
	fake.onTransactionCreateMutex.RLock()
	defer fake.onTransactionCreateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateInterceptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extension.CreateInterceptor = new(FakeCreateInterceptor)
