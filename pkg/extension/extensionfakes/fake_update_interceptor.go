// Code generated by counterfeiter. DO NOT EDIT.
package extensionfakes

import (
	"sync"

	"github.com/Peripli/service-manager/pkg/extension"
)

type FakeUpdateInterceptor struct {
	OnAPIUpdateStub        func(h extension.InterceptUpdateOnAPI) extension.InterceptUpdateOnAPI
	onAPIUpdateMutex       sync.RWMutex
	onAPIUpdateArgsForCall []struct {
		h extension.InterceptUpdateOnAPI
	}
	onAPIUpdateReturns struct {
		result1 extension.InterceptUpdateOnAPI
	}
	onAPIUpdateReturnsOnCall map[int]struct {
		result1 extension.InterceptUpdateOnAPI
	}
	OnTxUpdateStub        func(f extension.InterceptUpdateOnTx) extension.InterceptUpdateOnTx
	onTxUpdateMutex       sync.RWMutex
	onTxUpdateArgsForCall []struct {
		f extension.InterceptUpdateOnTx
	}
	onTxUpdateReturns struct {
		result1 extension.InterceptUpdateOnTx
	}
	onTxUpdateReturnsOnCall map[int]struct {
		result1 extension.InterceptUpdateOnTx
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdateInterceptor) OnAPIUpdate(h extension.InterceptUpdateOnAPI) extension.InterceptUpdateOnAPI {
	fake.onAPIUpdateMutex.Lock()
	ret, specificReturn := fake.onAPIUpdateReturnsOnCall[len(fake.onAPIUpdateArgsForCall)]
	fake.onAPIUpdateArgsForCall = append(fake.onAPIUpdateArgsForCall, struct {
		h extension.InterceptUpdateOnAPI
	}{h})
	fake.recordInvocation("OnAPIUpdate", []interface{}{h})
	fake.onAPIUpdateMutex.Unlock()
	if fake.OnAPIUpdateStub != nil {
		return fake.OnAPIUpdateStub(h)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.onAPIUpdateReturns.result1
}

func (fake *FakeUpdateInterceptor) OnAPIUpdateCallCount() int {
	fake.onAPIUpdateMutex.RLock()
	defer fake.onAPIUpdateMutex.RUnlock()
	return len(fake.onAPIUpdateArgsForCall)
}

func (fake *FakeUpdateInterceptor) OnAPIUpdateArgsForCall(i int) extension.InterceptUpdateOnAPI {
	fake.onAPIUpdateMutex.RLock()
	defer fake.onAPIUpdateMutex.RUnlock()
	return fake.onAPIUpdateArgsForCall[i].h
}

func (fake *FakeUpdateInterceptor) OnAPIUpdateReturns(result1 extension.InterceptUpdateOnAPI) {
	fake.OnAPIUpdateStub = nil
	fake.onAPIUpdateReturns = struct {
		result1 extension.InterceptUpdateOnAPI
	}{result1}
}

func (fake *FakeUpdateInterceptor) OnAPIUpdateReturnsOnCall(i int, result1 extension.InterceptUpdateOnAPI) {
	fake.OnAPIUpdateStub = nil
	if fake.onAPIUpdateReturnsOnCall == nil {
		fake.onAPIUpdateReturnsOnCall = make(map[int]struct {
			result1 extension.InterceptUpdateOnAPI
		})
	}
	fake.onAPIUpdateReturnsOnCall[i] = struct {
		result1 extension.InterceptUpdateOnAPI
	}{result1}
}

func (fake *FakeUpdateInterceptor) OnTxUpdate(f extension.InterceptUpdateOnTx) extension.InterceptUpdateOnTx {
	fake.onTxUpdateMutex.Lock()
	ret, specificReturn := fake.onTxUpdateReturnsOnCall[len(fake.onTxUpdateArgsForCall)]
	fake.onTxUpdateArgsForCall = append(fake.onTxUpdateArgsForCall, struct {
		f extension.InterceptUpdateOnTx
	}{f})
	fake.recordInvocation("OnTxUpdate", []interface{}{f})
	fake.onTxUpdateMutex.Unlock()
	if fake.OnTxUpdateStub != nil {
		return fake.OnTxUpdateStub(f)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.onTxUpdateReturns.result1
}

func (fake *FakeUpdateInterceptor) OnTxUpdateCallCount() int {
	fake.onTxUpdateMutex.RLock()
	defer fake.onTxUpdateMutex.RUnlock()
	return len(fake.onTxUpdateArgsForCall)
}

func (fake *FakeUpdateInterceptor) OnTxUpdateArgsForCall(i int) extension.InterceptUpdateOnTx {
	fake.onTxUpdateMutex.RLock()
	defer fake.onTxUpdateMutex.RUnlock()
	return fake.onTxUpdateArgsForCall[i].f
}

func (fake *FakeUpdateInterceptor) OnTxUpdateReturns(result1 extension.InterceptUpdateOnTx) {
	fake.OnTxUpdateStub = nil
	fake.onTxUpdateReturns = struct {
		result1 extension.InterceptUpdateOnTx
	}{result1}
}

func (fake *FakeUpdateInterceptor) OnTxUpdateReturnsOnCall(i int, result1 extension.InterceptUpdateOnTx) {
	fake.OnTxUpdateStub = nil
	if fake.onTxUpdateReturnsOnCall == nil {
		fake.onTxUpdateReturnsOnCall = make(map[int]struct {
			result1 extension.InterceptUpdateOnTx
		})
	}
	fake.onTxUpdateReturnsOnCall[i] = struct {
		result1 extension.InterceptUpdateOnTx
	}{result1}
}

func (fake *FakeUpdateInterceptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onAPIUpdateMutex.RLock()
	defer fake.onAPIUpdateMutex.RUnlock()
	fake.onTxUpdateMutex.RLock()
	defer fake.onTxUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdateInterceptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extension.UpdateInterceptor = new(FakeUpdateInterceptor)
