// Code generated by counterfeiter. DO NOT EDIT.
package notification_connectionfakes

import (
	"sync"

	"github.com/Peripli/service-manager/storage/postgres/notification_connection"
	"github.com/lib/pq"
)

type FakeNotificationConnection struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ListenStub        func(string) error
	listenMutex       sync.RWMutex
	listenArgsForCall []struct {
		arg1 string
	}
	listenReturns struct {
		result1 error
	}
	listenReturnsOnCall map[int]struct {
		result1 error
	}
	NotificationChannelStub        func() <-chan *pq.Notification
	notificationChannelMutex       sync.RWMutex
	notificationChannelArgsForCall []struct {
	}
	notificationChannelReturns struct {
		result1 <-chan *pq.Notification
	}
	notificationChannelReturnsOnCall map[int]struct {
		result1 <-chan *pq.Notification
	}
	UnlistenStub        func(string) error
	unlistenMutex       sync.RWMutex
	unlistenArgsForCall []struct {
		arg1 string
	}
	unlistenReturns struct {
		result1 error
	}
	unlistenReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotificationConnection) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakeNotificationConnection) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeNotificationConnection) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeNotificationConnection) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationConnection) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationConnection) Listen(arg1 string) error {
	fake.listenMutex.Lock()
	ret, specificReturn := fake.listenReturnsOnCall[len(fake.listenArgsForCall)]
	fake.listenArgsForCall = append(fake.listenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Listen", []interface{}{arg1})
	fake.listenMutex.Unlock()
	if fake.ListenStub != nil {
		return fake.ListenStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listenReturns
	return fakeReturns.result1
}

func (fake *FakeNotificationConnection) ListenCallCount() int {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return len(fake.listenArgsForCall)
}

func (fake *FakeNotificationConnection) ListenCalls(stub func(string) error) {
	fake.listenMutex.Lock()
	defer fake.listenMutex.Unlock()
	fake.ListenStub = stub
}

func (fake *FakeNotificationConnection) ListenArgsForCall(i int) string {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	argsForCall := fake.listenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNotificationConnection) ListenReturns(result1 error) {
	fake.listenMutex.Lock()
	defer fake.listenMutex.Unlock()
	fake.ListenStub = nil
	fake.listenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationConnection) ListenReturnsOnCall(i int, result1 error) {
	fake.listenMutex.Lock()
	defer fake.listenMutex.Unlock()
	fake.ListenStub = nil
	if fake.listenReturnsOnCall == nil {
		fake.listenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationConnection) NotificationChannel() <-chan *pq.Notification {
	fake.notificationChannelMutex.Lock()
	ret, specificReturn := fake.notificationChannelReturnsOnCall[len(fake.notificationChannelArgsForCall)]
	fake.notificationChannelArgsForCall = append(fake.notificationChannelArgsForCall, struct {
	}{})
	fake.recordInvocation("NotificationChannel", []interface{}{})
	fake.notificationChannelMutex.Unlock()
	if fake.NotificationChannelStub != nil {
		return fake.NotificationChannelStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.notificationChannelReturns
	return fakeReturns.result1
}

func (fake *FakeNotificationConnection) NotificationChannelCallCount() int {
	fake.notificationChannelMutex.RLock()
	defer fake.notificationChannelMutex.RUnlock()
	return len(fake.notificationChannelArgsForCall)
}

func (fake *FakeNotificationConnection) NotificationChannelCalls(stub func() <-chan *pq.Notification) {
	fake.notificationChannelMutex.Lock()
	defer fake.notificationChannelMutex.Unlock()
	fake.NotificationChannelStub = stub
}

func (fake *FakeNotificationConnection) NotificationChannelReturns(result1 <-chan *pq.Notification) {
	fake.notificationChannelMutex.Lock()
	defer fake.notificationChannelMutex.Unlock()
	fake.NotificationChannelStub = nil
	fake.notificationChannelReturns = struct {
		result1 <-chan *pq.Notification
	}{result1}
}

func (fake *FakeNotificationConnection) NotificationChannelReturnsOnCall(i int, result1 <-chan *pq.Notification) {
	fake.notificationChannelMutex.Lock()
	defer fake.notificationChannelMutex.Unlock()
	fake.NotificationChannelStub = nil
	if fake.notificationChannelReturnsOnCall == nil {
		fake.notificationChannelReturnsOnCall = make(map[int]struct {
			result1 <-chan *pq.Notification
		})
	}
	fake.notificationChannelReturnsOnCall[i] = struct {
		result1 <-chan *pq.Notification
	}{result1}
}

func (fake *FakeNotificationConnection) Unlisten(arg1 string) error {
	fake.unlistenMutex.Lock()
	ret, specificReturn := fake.unlistenReturnsOnCall[len(fake.unlistenArgsForCall)]
	fake.unlistenArgsForCall = append(fake.unlistenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Unlisten", []interface{}{arg1})
	fake.unlistenMutex.Unlock()
	if fake.UnlistenStub != nil {
		return fake.UnlistenStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unlistenReturns
	return fakeReturns.result1
}

func (fake *FakeNotificationConnection) UnlistenCallCount() int {
	fake.unlistenMutex.RLock()
	defer fake.unlistenMutex.RUnlock()
	return len(fake.unlistenArgsForCall)
}

func (fake *FakeNotificationConnection) UnlistenCalls(stub func(string) error) {
	fake.unlistenMutex.Lock()
	defer fake.unlistenMutex.Unlock()
	fake.UnlistenStub = stub
}

func (fake *FakeNotificationConnection) UnlistenArgsForCall(i int) string {
	fake.unlistenMutex.RLock()
	defer fake.unlistenMutex.RUnlock()
	argsForCall := fake.unlistenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNotificationConnection) UnlistenReturns(result1 error) {
	fake.unlistenMutex.Lock()
	defer fake.unlistenMutex.Unlock()
	fake.UnlistenStub = nil
	fake.unlistenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationConnection) UnlistenReturnsOnCall(i int, result1 error) {
	fake.unlistenMutex.Lock()
	defer fake.unlistenMutex.Unlock()
	fake.UnlistenStub = nil
	if fake.unlistenReturnsOnCall == nil {
		fake.unlistenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unlistenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationConnection) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	fake.notificationChannelMutex.RLock()
	defer fake.notificationChannelMutex.RUnlock()
	fake.unlistenMutex.RLock()
	defer fake.unlistenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotificationConnection) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ notification_connection.NotificationConnection = new(FakeNotificationConnection)
