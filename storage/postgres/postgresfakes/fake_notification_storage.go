// Code generated by counterfeiter. DO NOT EDIT.
package postgresfakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/pkg/types"
)

type FakeNotificationStorage struct {
	GetLastRevisionStub        func(context.Context) (int64, error)
	getLastRevisionMutex       sync.RWMutex
	getLastRevisionArgsForCall []struct {
		arg1 context.Context
	}
	getLastRevisionReturns struct {
		result1 int64
		result2 error
	}
	getLastRevisionReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	GetNotificationStub        func(context.Context, string) (*types.Notification, error)
	getNotificationMutex       sync.RWMutex
	getNotificationArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getNotificationReturns struct {
		result1 *types.Notification
		result2 error
	}
	getNotificationReturnsOnCall map[int]struct {
		result1 *types.Notification
		result2 error
	}
	GetNotificationByRevisionStub        func(context.Context, int64) (*types.Notification, error)
	getNotificationByRevisionMutex       sync.RWMutex
	getNotificationByRevisionArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getNotificationByRevisionReturns struct {
		result1 *types.Notification
		result2 error
	}
	getNotificationByRevisionReturnsOnCall map[int]struct {
		result1 *types.Notification
		result2 error
	}
	ListNotificationsStub        func(context.Context, string, int64, int64) ([]*types.Notification, error)
	listNotificationsMutex       sync.RWMutex
	listNotificationsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	listNotificationsReturns struct {
		result1 []*types.Notification
		result2 error
	}
	listNotificationsReturnsOnCall map[int]struct {
		result1 []*types.Notification
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotificationStorage) GetLastRevision(arg1 context.Context) (int64, error) {
	fake.getLastRevisionMutex.Lock()
	ret, specificReturn := fake.getLastRevisionReturnsOnCall[len(fake.getLastRevisionArgsForCall)]
	fake.getLastRevisionArgsForCall = append(fake.getLastRevisionArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetLastRevision", []interface{}{arg1})
	fake.getLastRevisionMutex.Unlock()
	if fake.GetLastRevisionStub != nil {
		return fake.GetLastRevisionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLastRevisionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotificationStorage) GetLastRevisionCallCount() int {
	fake.getLastRevisionMutex.RLock()
	defer fake.getLastRevisionMutex.RUnlock()
	return len(fake.getLastRevisionArgsForCall)
}

func (fake *FakeNotificationStorage) GetLastRevisionCalls(stub func(context.Context) (int64, error)) {
	fake.getLastRevisionMutex.Lock()
	defer fake.getLastRevisionMutex.Unlock()
	fake.GetLastRevisionStub = stub
}

func (fake *FakeNotificationStorage) GetLastRevisionArgsForCall(i int) context.Context {
	fake.getLastRevisionMutex.RLock()
	defer fake.getLastRevisionMutex.RUnlock()
	argsForCall := fake.getLastRevisionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNotificationStorage) GetLastRevisionReturns(result1 int64, result2 error) {
	fake.getLastRevisionMutex.Lock()
	defer fake.getLastRevisionMutex.Unlock()
	fake.GetLastRevisionStub = nil
	fake.getLastRevisionReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetLastRevisionReturnsOnCall(i int, result1 int64, result2 error) {
	fake.getLastRevisionMutex.Lock()
	defer fake.getLastRevisionMutex.Unlock()
	fake.GetLastRevisionStub = nil
	if fake.getLastRevisionReturnsOnCall == nil {
		fake.getLastRevisionReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.getLastRevisionReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetNotification(arg1 context.Context, arg2 string) (*types.Notification, error) {
	fake.getNotificationMutex.Lock()
	ret, specificReturn := fake.getNotificationReturnsOnCall[len(fake.getNotificationArgsForCall)]
	fake.getNotificationArgsForCall = append(fake.getNotificationArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetNotification", []interface{}{arg1, arg2})
	fake.getNotificationMutex.Unlock()
	if fake.GetNotificationStub != nil {
		return fake.GetNotificationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getNotificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotificationStorage) GetNotificationCallCount() int {
	fake.getNotificationMutex.RLock()
	defer fake.getNotificationMutex.RUnlock()
	return len(fake.getNotificationArgsForCall)
}

func (fake *FakeNotificationStorage) GetNotificationCalls(stub func(context.Context, string) (*types.Notification, error)) {
	fake.getNotificationMutex.Lock()
	defer fake.getNotificationMutex.Unlock()
	fake.GetNotificationStub = stub
}

func (fake *FakeNotificationStorage) GetNotificationArgsForCall(i int) (context.Context, string) {
	fake.getNotificationMutex.RLock()
	defer fake.getNotificationMutex.RUnlock()
	argsForCall := fake.getNotificationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNotificationStorage) GetNotificationReturns(result1 *types.Notification, result2 error) {
	fake.getNotificationMutex.Lock()
	defer fake.getNotificationMutex.Unlock()
	fake.GetNotificationStub = nil
	fake.getNotificationReturns = struct {
		result1 *types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetNotificationReturnsOnCall(i int, result1 *types.Notification, result2 error) {
	fake.getNotificationMutex.Lock()
	defer fake.getNotificationMutex.Unlock()
	fake.GetNotificationStub = nil
	if fake.getNotificationReturnsOnCall == nil {
		fake.getNotificationReturnsOnCall = make(map[int]struct {
			result1 *types.Notification
			result2 error
		})
	}
	fake.getNotificationReturnsOnCall[i] = struct {
		result1 *types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetNotificationByRevision(arg1 context.Context, arg2 int64) (*types.Notification, error) {
	fake.getNotificationByRevisionMutex.Lock()
	ret, specificReturn := fake.getNotificationByRevisionReturnsOnCall[len(fake.getNotificationByRevisionArgsForCall)]
	fake.getNotificationByRevisionArgsForCall = append(fake.getNotificationByRevisionArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("GetNotificationByRevision", []interface{}{arg1, arg2})
	fake.getNotificationByRevisionMutex.Unlock()
	if fake.GetNotificationByRevisionStub != nil {
		return fake.GetNotificationByRevisionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getNotificationByRevisionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotificationStorage) GetNotificationByRevisionCallCount() int {
	fake.getNotificationByRevisionMutex.RLock()
	defer fake.getNotificationByRevisionMutex.RUnlock()
	return len(fake.getNotificationByRevisionArgsForCall)
}

func (fake *FakeNotificationStorage) GetNotificationByRevisionCalls(stub func(context.Context, int64) (*types.Notification, error)) {
	fake.getNotificationByRevisionMutex.Lock()
	defer fake.getNotificationByRevisionMutex.Unlock()
	fake.GetNotificationByRevisionStub = stub
}

func (fake *FakeNotificationStorage) GetNotificationByRevisionArgsForCall(i int) (context.Context, int64) {
	fake.getNotificationByRevisionMutex.RLock()
	defer fake.getNotificationByRevisionMutex.RUnlock()
	argsForCall := fake.getNotificationByRevisionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNotificationStorage) GetNotificationByRevisionReturns(result1 *types.Notification, result2 error) {
	fake.getNotificationByRevisionMutex.Lock()
	defer fake.getNotificationByRevisionMutex.Unlock()
	fake.GetNotificationByRevisionStub = nil
	fake.getNotificationByRevisionReturns = struct {
		result1 *types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) GetNotificationByRevisionReturnsOnCall(i int, result1 *types.Notification, result2 error) {
	fake.getNotificationByRevisionMutex.Lock()
	defer fake.getNotificationByRevisionMutex.Unlock()
	fake.GetNotificationByRevisionStub = nil
	if fake.getNotificationByRevisionReturnsOnCall == nil {
		fake.getNotificationByRevisionReturnsOnCall = make(map[int]struct {
			result1 *types.Notification
			result2 error
		})
	}
	fake.getNotificationByRevisionReturnsOnCall[i] = struct {
		result1 *types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) ListNotifications(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) ([]*types.Notification, error) {
	fake.listNotificationsMutex.Lock()
	ret, specificReturn := fake.listNotificationsReturnsOnCall[len(fake.listNotificationsArgsForCall)]
	fake.listNotificationsArgsForCall = append(fake.listNotificationsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListNotifications", []interface{}{arg1, arg2, arg3, arg4})
	fake.listNotificationsMutex.Unlock()
	if fake.ListNotificationsStub != nil {
		return fake.ListNotificationsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listNotificationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotificationStorage) ListNotificationsCallCount() int {
	fake.listNotificationsMutex.RLock()
	defer fake.listNotificationsMutex.RUnlock()
	return len(fake.listNotificationsArgsForCall)
}

func (fake *FakeNotificationStorage) ListNotificationsCalls(stub func(context.Context, string, int64, int64) ([]*types.Notification, error)) {
	fake.listNotificationsMutex.Lock()
	defer fake.listNotificationsMutex.Unlock()
	fake.ListNotificationsStub = stub
}

func (fake *FakeNotificationStorage) ListNotificationsArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.listNotificationsMutex.RLock()
	defer fake.listNotificationsMutex.RUnlock()
	argsForCall := fake.listNotificationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeNotificationStorage) ListNotificationsReturns(result1 []*types.Notification, result2 error) {
	fake.listNotificationsMutex.Lock()
	defer fake.listNotificationsMutex.Unlock()
	fake.ListNotificationsStub = nil
	fake.listNotificationsReturns = struct {
		result1 []*types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) ListNotificationsReturnsOnCall(i int, result1 []*types.Notification, result2 error) {
	fake.listNotificationsMutex.Lock()
	defer fake.listNotificationsMutex.Unlock()
	fake.ListNotificationsStub = nil
	if fake.listNotificationsReturnsOnCall == nil {
		fake.listNotificationsReturnsOnCall = make(map[int]struct {
			result1 []*types.Notification
			result2 error
		})
	}
	fake.listNotificationsReturnsOnCall[i] = struct {
		result1 []*types.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotificationStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLastRevisionMutex.RLock()
	defer fake.getLastRevisionMutex.RUnlock()
	fake.getNotificationMutex.RLock()
	defer fake.getNotificationMutex.RUnlock()
	fake.getNotificationByRevisionMutex.RLock()
	defer fake.getNotificationByRevisionMutex.RUnlock()
	fake.listNotificationsMutex.RLock()
	defer fake.listNotificationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotificationStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
