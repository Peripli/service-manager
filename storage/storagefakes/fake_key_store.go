// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/storage"
)

type FakeKeyStore struct {
	GetEncryptionKeyStub        func(context.Context, func(context.Context, []byte, []byte) ([]byte, error)) ([]byte, error)
	getEncryptionKeyMutex       sync.RWMutex
	getEncryptionKeyArgsForCall []struct {
		arg1 context.Context
		arg2 func(context.Context, []byte, []byte) ([]byte, error)
	}
	getEncryptionKeyReturns struct {
		result1 []byte
		result2 error
	}
	getEncryptionKeyReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	LockStub        func(context.Context) error
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		arg1 context.Context
	}
	lockReturns struct {
		result1 error
	}
	lockReturnsOnCall map[int]struct {
		result1 error
	}
	SetEncryptionKeyStub        func(context.Context, []byte, func(context.Context, []byte, []byte) ([]byte, error)) error
	setEncryptionKeyMutex       sync.RWMutex
	setEncryptionKeyArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
		arg3 func(context.Context, []byte, []byte) ([]byte, error)
	}
	setEncryptionKeyReturns struct {
		result1 error
	}
	setEncryptionKeyReturnsOnCall map[int]struct {
		result1 error
	}
	UnlockStub        func(context.Context) error
	unlockMutex       sync.RWMutex
	unlockArgsForCall []struct {
		arg1 context.Context
	}
	unlockReturns struct {
		result1 error
	}
	unlockReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKeyStore) GetEncryptionKey(arg1 context.Context, arg2 func(context.Context, []byte, []byte) ([]byte, error)) ([]byte, error) {
	fake.getEncryptionKeyMutex.Lock()
	ret, specificReturn := fake.getEncryptionKeyReturnsOnCall[len(fake.getEncryptionKeyArgsForCall)]
	fake.getEncryptionKeyArgsForCall = append(fake.getEncryptionKeyArgsForCall, struct {
		arg1 context.Context
		arg2 func(context.Context, []byte, []byte) ([]byte, error)
	}{arg1, arg2})
	fake.recordInvocation("GetEncryptionKey", []interface{}{arg1, arg2})
	fake.getEncryptionKeyMutex.Unlock()
	if fake.GetEncryptionKeyStub != nil {
		return fake.GetEncryptionKeyStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getEncryptionKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKeyStore) GetEncryptionKeyCallCount() int {
	fake.getEncryptionKeyMutex.RLock()
	defer fake.getEncryptionKeyMutex.RUnlock()
	return len(fake.getEncryptionKeyArgsForCall)
}

func (fake *FakeKeyStore) GetEncryptionKeyCalls(stub func(context.Context, func(context.Context, []byte, []byte) ([]byte, error)) ([]byte, error)) {
	fake.getEncryptionKeyMutex.Lock()
	defer fake.getEncryptionKeyMutex.Unlock()
	fake.GetEncryptionKeyStub = stub
}

func (fake *FakeKeyStore) GetEncryptionKeyArgsForCall(i int) (context.Context, func(context.Context, []byte, []byte) ([]byte, error)) {
	fake.getEncryptionKeyMutex.RLock()
	defer fake.getEncryptionKeyMutex.RUnlock()
	argsForCall := fake.getEncryptionKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKeyStore) GetEncryptionKeyReturns(result1 []byte, result2 error) {
	fake.getEncryptionKeyMutex.Lock()
	defer fake.getEncryptionKeyMutex.Unlock()
	fake.GetEncryptionKeyStub = nil
	fake.getEncryptionKeyReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyStore) GetEncryptionKeyReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getEncryptionKeyMutex.Lock()
	defer fake.getEncryptionKeyMutex.Unlock()
	fake.GetEncryptionKeyStub = nil
	if fake.getEncryptionKeyReturnsOnCall == nil {
		fake.getEncryptionKeyReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getEncryptionKeyReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyStore) Lock(arg1 context.Context) error {
	fake.lockMutex.Lock()
	ret, specificReturn := fake.lockReturnsOnCall[len(fake.lockArgsForCall)]
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Lock", []interface{}{arg1})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		return fake.LockStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.lockReturns
	return fakeReturns.result1
}

func (fake *FakeKeyStore) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeKeyStore) LockCalls(stub func(context.Context) error) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = stub
}

func (fake *FakeKeyStore) LockArgsForCall(i int) context.Context {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	argsForCall := fake.lockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKeyStore) LockReturns(result1 error) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = nil
	fake.lockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKeyStore) LockReturnsOnCall(i int, result1 error) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = nil
	if fake.lockReturnsOnCall == nil {
		fake.lockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.lockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKeyStore) SetEncryptionKey(arg1 context.Context, arg2 []byte, arg3 func(context.Context, []byte, []byte) ([]byte, error)) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.setEncryptionKeyMutex.Lock()
	ret, specificReturn := fake.setEncryptionKeyReturnsOnCall[len(fake.setEncryptionKeyArgsForCall)]
	fake.setEncryptionKeyArgsForCall = append(fake.setEncryptionKeyArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
		arg3 func(context.Context, []byte, []byte) ([]byte, error)
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("SetEncryptionKey", []interface{}{arg1, arg2Copy, arg3})
	fake.setEncryptionKeyMutex.Unlock()
	if fake.SetEncryptionKeyStub != nil {
		return fake.SetEncryptionKeyStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setEncryptionKeyReturns
	return fakeReturns.result1
}

func (fake *FakeKeyStore) SetEncryptionKeyCallCount() int {
	fake.setEncryptionKeyMutex.RLock()
	defer fake.setEncryptionKeyMutex.RUnlock()
	return len(fake.setEncryptionKeyArgsForCall)
}

func (fake *FakeKeyStore) SetEncryptionKeyCalls(stub func(context.Context, []byte, func(context.Context, []byte, []byte) ([]byte, error)) error) {
	fake.setEncryptionKeyMutex.Lock()
	defer fake.setEncryptionKeyMutex.Unlock()
	fake.SetEncryptionKeyStub = stub
}

func (fake *FakeKeyStore) SetEncryptionKeyArgsForCall(i int) (context.Context, []byte, func(context.Context, []byte, []byte) ([]byte, error)) {
	fake.setEncryptionKeyMutex.RLock()
	defer fake.setEncryptionKeyMutex.RUnlock()
	argsForCall := fake.setEncryptionKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKeyStore) SetEncryptionKeyReturns(result1 error) {
	fake.setEncryptionKeyMutex.Lock()
	defer fake.setEncryptionKeyMutex.Unlock()
	fake.SetEncryptionKeyStub = nil
	fake.setEncryptionKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKeyStore) SetEncryptionKeyReturnsOnCall(i int, result1 error) {
	fake.setEncryptionKeyMutex.Lock()
	defer fake.setEncryptionKeyMutex.Unlock()
	fake.SetEncryptionKeyStub = nil
	if fake.setEncryptionKeyReturnsOnCall == nil {
		fake.setEncryptionKeyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setEncryptionKeyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKeyStore) Unlock(arg1 context.Context) error {
	fake.unlockMutex.Lock()
	ret, specificReturn := fake.unlockReturnsOnCall[len(fake.unlockArgsForCall)]
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Unlock", []interface{}{arg1})
	fake.unlockMutex.Unlock()
	if fake.UnlockStub != nil {
		return fake.UnlockStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unlockReturns
	return fakeReturns.result1
}

func (fake *FakeKeyStore) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *FakeKeyStore) UnlockCalls(stub func(context.Context) error) {
	fake.unlockMutex.Lock()
	defer fake.unlockMutex.Unlock()
	fake.UnlockStub = stub
}

func (fake *FakeKeyStore) UnlockArgsForCall(i int) context.Context {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	argsForCall := fake.unlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKeyStore) UnlockReturns(result1 error) {
	fake.unlockMutex.Lock()
	defer fake.unlockMutex.Unlock()
	fake.UnlockStub = nil
	fake.unlockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKeyStore) UnlockReturnsOnCall(i int, result1 error) {
	fake.unlockMutex.Lock()
	defer fake.unlockMutex.Unlock()
	fake.UnlockStub = nil
	if fake.unlockReturnsOnCall == nil {
		fake.unlockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unlockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKeyStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEncryptionKeyMutex.RLock()
	defer fake.getEncryptionKeyMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.setEncryptionKeyMutex.RLock()
	defer fake.setEncryptionKeyMutex.RUnlock()
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKeyStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.KeyStore = new(FakeKeyStore)
