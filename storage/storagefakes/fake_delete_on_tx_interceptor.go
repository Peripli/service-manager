// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"sync"

	"github.com/Peripli/service-manager/storage"
)

type FakeDeleteOnTxInterceptor struct {
	OnTxDeleteStub        func(storage.InterceptDeleteOnTxFunc) storage.InterceptDeleteOnTxFunc
	onTxDeleteMutex       sync.RWMutex
	onTxDeleteArgsForCall []struct {
		arg1 storage.InterceptDeleteOnTxFunc
	}
	onTxDeleteReturns struct {
		result1 storage.InterceptDeleteOnTxFunc
	}
	onTxDeleteReturnsOnCall map[int]struct {
		result1 storage.InterceptDeleteOnTxFunc
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeleteOnTxInterceptor) OnTxDelete(arg1 storage.InterceptDeleteOnTxFunc) storage.InterceptDeleteOnTxFunc {
	fake.onTxDeleteMutex.Lock()
	ret, specificReturn := fake.onTxDeleteReturnsOnCall[len(fake.onTxDeleteArgsForCall)]
	fake.onTxDeleteArgsForCall = append(fake.onTxDeleteArgsForCall, struct {
		arg1 storage.InterceptDeleteOnTxFunc
	}{arg1})
	fake.recordInvocation("OnTxDelete", []interface{}{arg1})
	fake.onTxDeleteMutex.Unlock()
	if fake.OnTxDeleteStub != nil {
		return fake.OnTxDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.onTxDeleteReturns
	return fakeReturns.result1
}

func (fake *FakeDeleteOnTxInterceptor) OnTxDeleteCallCount() int {
	fake.onTxDeleteMutex.RLock()
	defer fake.onTxDeleteMutex.RUnlock()
	return len(fake.onTxDeleteArgsForCall)
}

func (fake *FakeDeleteOnTxInterceptor) OnTxDeleteCalls(stub func(storage.InterceptDeleteOnTxFunc) storage.InterceptDeleteOnTxFunc) {
	fake.onTxDeleteMutex.Lock()
	defer fake.onTxDeleteMutex.Unlock()
	fake.OnTxDeleteStub = stub
}

func (fake *FakeDeleteOnTxInterceptor) OnTxDeleteArgsForCall(i int) storage.InterceptDeleteOnTxFunc {
	fake.onTxDeleteMutex.RLock()
	defer fake.onTxDeleteMutex.RUnlock()
	argsForCall := fake.onTxDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeleteOnTxInterceptor) OnTxDeleteReturns(result1 storage.InterceptDeleteOnTxFunc) {
	fake.onTxDeleteMutex.Lock()
	defer fake.onTxDeleteMutex.Unlock()
	fake.OnTxDeleteStub = nil
	fake.onTxDeleteReturns = struct {
		result1 storage.InterceptDeleteOnTxFunc
	}{result1}
}

func (fake *FakeDeleteOnTxInterceptor) OnTxDeleteReturnsOnCall(i int, result1 storage.InterceptDeleteOnTxFunc) {
	fake.onTxDeleteMutex.Lock()
	defer fake.onTxDeleteMutex.Unlock()
	fake.OnTxDeleteStub = nil
	if fake.onTxDeleteReturnsOnCall == nil {
		fake.onTxDeleteReturnsOnCall = make(map[int]struct {
			result1 storage.InterceptDeleteOnTxFunc
		})
	}
	fake.onTxDeleteReturnsOnCall[i] = struct {
		result1 storage.InterceptDeleteOnTxFunc
	}{result1}
}

func (fake *FakeDeleteOnTxInterceptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onTxDeleteMutex.RLock()
	defer fake.onTxDeleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeleteOnTxInterceptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.DeleteOnTxInterceptor = new(FakeDeleteOnTxInterceptor)
