// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/storage"
	"github.com/Peripli/service-manager/types"
)

type FakeBroker struct {
	CreateStub        func(ctx context.Context, broker *types.Broker) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		ctx    context.Context
		broker *types.Broker
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	FindStub        func(ctx context.Context, id string) (*types.Broker, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		ctx context.Context
		id  string
	}
	findReturns struct {
		result1 *types.Broker
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 *types.Broker
		result2 error
	}
	FindAllStub        func(ctx context.Context) ([]*types.Broker, error)
	findAllMutex       sync.RWMutex
	findAllArgsForCall []struct {
		ctx context.Context
	}
	findAllReturns struct {
		result1 []*types.Broker
		result2 error
	}
	findAllReturnsOnCall map[int]struct {
		result1 []*types.Broker
		result2 error
	}
	DeleteStub        func(ctx context.Context, id string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		ctx context.Context
		id  string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(ctx context.Context, broker *types.Broker) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		ctx    context.Context
		broker *types.Broker
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBroker) Create(ctx context.Context, broker *types.Broker) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		ctx    context.Context
		broker *types.Broker
	}{ctx, broker})
	fake.recordInvocation("Create", []interface{}{ctx, broker})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(ctx, broker)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeBroker) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeBroker) CreateArgsForCall(i int) (context.Context, *types.Broker) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].ctx, fake.createArgsForCall[i].broker
}

func (fake *FakeBroker) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBroker) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBroker) Find(ctx context.Context, id string) (*types.Broker, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		ctx context.Context
		id  string
	}{ctx, id})
	fake.recordInvocation("Find", []interface{}{ctx, id})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(ctx, id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReturns.result1, fake.findReturns.result2
}

func (fake *FakeBroker) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeBroker) FindArgsForCall(i int) (context.Context, string) {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].ctx, fake.findArgsForCall[i].id
}

func (fake *FakeBroker) FindReturns(result1 *types.Broker, result2 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 *types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeBroker) FindReturnsOnCall(i int, result1 *types.Broker, result2 error) {
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 *types.Broker
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 *types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeBroker) FindAll(ctx context.Context) ([]*types.Broker, error) {
	fake.findAllMutex.Lock()
	ret, specificReturn := fake.findAllReturnsOnCall[len(fake.findAllArgsForCall)]
	fake.findAllArgsForCall = append(fake.findAllArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("FindAll", []interface{}{ctx})
	fake.findAllMutex.Unlock()
	if fake.FindAllStub != nil {
		return fake.FindAllStub(ctx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findAllReturns.result1, fake.findAllReturns.result2
}

func (fake *FakeBroker) FindAllCallCount() int {
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	return len(fake.findAllArgsForCall)
}

func (fake *FakeBroker) FindAllArgsForCall(i int) context.Context {
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	return fake.findAllArgsForCall[i].ctx
}

func (fake *FakeBroker) FindAllReturns(result1 []*types.Broker, result2 error) {
	fake.FindAllStub = nil
	fake.findAllReturns = struct {
		result1 []*types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeBroker) FindAllReturnsOnCall(i int, result1 []*types.Broker, result2 error) {
	fake.FindAllStub = nil
	if fake.findAllReturnsOnCall == nil {
		fake.findAllReturnsOnCall = make(map[int]struct {
			result1 []*types.Broker
			result2 error
		})
	}
	fake.findAllReturnsOnCall[i] = struct {
		result1 []*types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeBroker) Delete(ctx context.Context, id string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		ctx context.Context
		id  string
	}{ctx, id})
	fake.recordInvocation("Delete", []interface{}{ctx, id})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(ctx, id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeBroker) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeBroker) DeleteArgsForCall(i int) (context.Context, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].ctx, fake.deleteArgsForCall[i].id
}

func (fake *FakeBroker) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBroker) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBroker) Update(ctx context.Context, broker *types.Broker) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		ctx    context.Context
		broker *types.Broker
	}{ctx, broker})
	fake.recordInvocation("Update", []interface{}{ctx, broker})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(ctx, broker)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeBroker) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeBroker) UpdateArgsForCall(i int) (context.Context, *types.Broker) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].ctx, fake.updateArgsForCall[i].broker
}

func (fake *FakeBroker) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBroker) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBroker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBroker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Broker = new(FakeBroker)
