// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/pkg/types"
	"github.com/Peripli/service-manager/storage"
)

type FakeNotificator struct {
	RegisterConsumerStub        func(*types.Platform, int64) (storage.NotificationQueue, int64, error)
	registerConsumerMutex       sync.RWMutex
	registerConsumerArgsForCall []struct {
		arg1 *types.Platform
		arg2 int64
	}
	registerConsumerReturns struct {
		result1 storage.NotificationQueue
		result2 int64
		result3 error
	}
	registerConsumerReturnsOnCall map[int]struct {
		result1 storage.NotificationQueue
		result2 int64
		result3 error
	}
	RegisterFilterStub        func(storage.ReceiversFilterFunc)
	registerFilterMutex       sync.RWMutex
	registerFilterArgsForCall []struct {
		arg1 storage.ReceiversFilterFunc
	}
	StartStub        func(context.Context, *sync.WaitGroup) error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 context.Context
		arg2 *sync.WaitGroup
	}
	startReturns struct {
		result1 error
	}
	startReturnsOnCall map[int]struct {
		result1 error
	}
	UnregisterConsumerStub        func(storage.NotificationQueue) error
	unregisterConsumerMutex       sync.RWMutex
	unregisterConsumerArgsForCall []struct {
		arg1 storage.NotificationQueue
	}
	unregisterConsumerReturns struct {
		result1 error
	}
	unregisterConsumerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotificator) RegisterConsumer(arg1 *types.Platform, arg2 int64) (storage.NotificationQueue, int64, error) {
	fake.registerConsumerMutex.Lock()
	ret, specificReturn := fake.registerConsumerReturnsOnCall[len(fake.registerConsumerArgsForCall)]
	fake.registerConsumerArgsForCall = append(fake.registerConsumerArgsForCall, struct {
		arg1 *types.Platform
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("RegisterConsumer", []interface{}{arg1, arg2})
	fake.registerConsumerMutex.Unlock()
	if fake.RegisterConsumerStub != nil {
		return fake.RegisterConsumerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.registerConsumerReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeNotificator) RegisterConsumerCallCount() int {
	fake.registerConsumerMutex.RLock()
	defer fake.registerConsumerMutex.RUnlock()
	return len(fake.registerConsumerArgsForCall)
}

func (fake *FakeNotificator) RegisterConsumerCalls(stub func(*types.Platform, int64) (storage.NotificationQueue, int64, error)) {
	fake.registerConsumerMutex.Lock()
	defer fake.registerConsumerMutex.Unlock()
	fake.RegisterConsumerStub = stub
}

func (fake *FakeNotificator) RegisterConsumerArgsForCall(i int) (*types.Platform, int64) {
	fake.registerConsumerMutex.RLock()
	defer fake.registerConsumerMutex.RUnlock()
	argsForCall := fake.registerConsumerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNotificator) RegisterConsumerReturns(result1 storage.NotificationQueue, result2 int64, result3 error) {
	fake.registerConsumerMutex.Lock()
	defer fake.registerConsumerMutex.Unlock()
	fake.RegisterConsumerStub = nil
	fake.registerConsumerReturns = struct {
		result1 storage.NotificationQueue
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeNotificator) RegisterConsumerReturnsOnCall(i int, result1 storage.NotificationQueue, result2 int64, result3 error) {
	fake.registerConsumerMutex.Lock()
	defer fake.registerConsumerMutex.Unlock()
	fake.RegisterConsumerStub = nil
	if fake.registerConsumerReturnsOnCall == nil {
		fake.registerConsumerReturnsOnCall = make(map[int]struct {
			result1 storage.NotificationQueue
			result2 int64
			result3 error
		})
	}
	fake.registerConsumerReturnsOnCall[i] = struct {
		result1 storage.NotificationQueue
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeNotificator) RegisterFilter(arg1 storage.ReceiversFilterFunc) {
	fake.registerFilterMutex.Lock()
	fake.registerFilterArgsForCall = append(fake.registerFilterArgsForCall, struct {
		arg1 storage.ReceiversFilterFunc
	}{arg1})
	fake.recordInvocation("RegisterFilter", []interface{}{arg1})
	fake.registerFilterMutex.Unlock()
	if fake.RegisterFilterStub != nil {
		fake.RegisterFilterStub(arg1)
	}
}

func (fake *FakeNotificator) RegisterFilterCallCount() int {
	fake.registerFilterMutex.RLock()
	defer fake.registerFilterMutex.RUnlock()
	return len(fake.registerFilterArgsForCall)
}

func (fake *FakeNotificator) RegisterFilterCalls(stub func(storage.ReceiversFilterFunc)) {
	fake.registerFilterMutex.Lock()
	defer fake.registerFilterMutex.Unlock()
	fake.RegisterFilterStub = stub
}

func (fake *FakeNotificator) RegisterFilterArgsForCall(i int) storage.ReceiversFilterFunc {
	fake.registerFilterMutex.RLock()
	defer fake.registerFilterMutex.RUnlock()
	argsForCall := fake.registerFilterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNotificator) Start(arg1 context.Context, arg2 *sync.WaitGroup) error {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 context.Context
		arg2 *sync.WaitGroup
	}{arg1, arg2})
	fake.recordInvocation("Start", []interface{}{arg1, arg2})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.startReturns
	return fakeReturns.result1
}

func (fake *FakeNotificator) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeNotificator) StartCalls(stub func(context.Context, *sync.WaitGroup) error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeNotificator) StartArgsForCall(i int) (context.Context, *sync.WaitGroup) {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	argsForCall := fake.startArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNotificator) StartReturns(result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificator) StartReturnsOnCall(i int, result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificator) UnregisterConsumer(arg1 storage.NotificationQueue) error {
	fake.unregisterConsumerMutex.Lock()
	ret, specificReturn := fake.unregisterConsumerReturnsOnCall[len(fake.unregisterConsumerArgsForCall)]
	fake.unregisterConsumerArgsForCall = append(fake.unregisterConsumerArgsForCall, struct {
		arg1 storage.NotificationQueue
	}{arg1})
	fake.recordInvocation("UnregisterConsumer", []interface{}{arg1})
	fake.unregisterConsumerMutex.Unlock()
	if fake.UnregisterConsumerStub != nil {
		return fake.UnregisterConsumerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unregisterConsumerReturns
	return fakeReturns.result1
}

func (fake *FakeNotificator) UnregisterConsumerCallCount() int {
	fake.unregisterConsumerMutex.RLock()
	defer fake.unregisterConsumerMutex.RUnlock()
	return len(fake.unregisterConsumerArgsForCall)
}

func (fake *FakeNotificator) UnregisterConsumerCalls(stub func(storage.NotificationQueue) error) {
	fake.unregisterConsumerMutex.Lock()
	defer fake.unregisterConsumerMutex.Unlock()
	fake.UnregisterConsumerStub = stub
}

func (fake *FakeNotificator) UnregisterConsumerArgsForCall(i int) storage.NotificationQueue {
	fake.unregisterConsumerMutex.RLock()
	defer fake.unregisterConsumerMutex.RUnlock()
	argsForCall := fake.unregisterConsumerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNotificator) UnregisterConsumerReturns(result1 error) {
	fake.unregisterConsumerMutex.Lock()
	defer fake.unregisterConsumerMutex.Unlock()
	fake.UnregisterConsumerStub = nil
	fake.unregisterConsumerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificator) UnregisterConsumerReturnsOnCall(i int, result1 error) {
	fake.unregisterConsumerMutex.Lock()
	defer fake.unregisterConsumerMutex.Unlock()
	fake.UnregisterConsumerStub = nil
	if fake.unregisterConsumerReturnsOnCall == nil {
		fake.unregisterConsumerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unregisterConsumerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerConsumerMutex.RLock()
	defer fake.registerConsumerMutex.RUnlock()
	fake.registerFilterMutex.RLock()
	defer fake.registerFilterMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.unregisterConsumerMutex.RLock()
	defer fake.unregisterConsumerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotificator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Notificator = new(FakeNotificator)
