// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"sync"

	"github.com/Peripli/service-manager/storage"
)

type FakeUpdateAroundTxInterceptor struct {
	AroundTxUpdateStub        func(storage.InterceptUpdateAroundTxFunc) storage.InterceptUpdateAroundTxFunc
	aroundTxUpdateMutex       sync.RWMutex
	aroundTxUpdateArgsForCall []struct {
		arg1 storage.InterceptUpdateAroundTxFunc
	}
	aroundTxUpdateReturns struct {
		result1 storage.InterceptUpdateAroundTxFunc
	}
	aroundTxUpdateReturnsOnCall map[int]struct {
		result1 storage.InterceptUpdateAroundTxFunc
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdateAroundTxInterceptor) AroundTxUpdate(arg1 storage.InterceptUpdateAroundTxFunc) storage.InterceptUpdateAroundTxFunc {
	fake.aroundTxUpdateMutex.Lock()
	ret, specificReturn := fake.aroundTxUpdateReturnsOnCall[len(fake.aroundTxUpdateArgsForCall)]
	fake.aroundTxUpdateArgsForCall = append(fake.aroundTxUpdateArgsForCall, struct {
		arg1 storage.InterceptUpdateAroundTxFunc
	}{arg1})
	fake.recordInvocation("AroundTxUpdate", []interface{}{arg1})
	fake.aroundTxUpdateMutex.Unlock()
	if fake.AroundTxUpdateStub != nil {
		return fake.AroundTxUpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.aroundTxUpdateReturns
	return fakeReturns.result1
}

func (fake *FakeUpdateAroundTxInterceptor) AroundTxUpdateCallCount() int {
	fake.aroundTxUpdateMutex.RLock()
	defer fake.aroundTxUpdateMutex.RUnlock()
	return len(fake.aroundTxUpdateArgsForCall)
}

func (fake *FakeUpdateAroundTxInterceptor) AroundTxUpdateCalls(stub func(storage.InterceptUpdateAroundTxFunc) storage.InterceptUpdateAroundTxFunc) {
	fake.aroundTxUpdateMutex.Lock()
	defer fake.aroundTxUpdateMutex.Unlock()
	fake.AroundTxUpdateStub = stub
}

func (fake *FakeUpdateAroundTxInterceptor) AroundTxUpdateArgsForCall(i int) storage.InterceptUpdateAroundTxFunc {
	fake.aroundTxUpdateMutex.RLock()
	defer fake.aroundTxUpdateMutex.RUnlock()
	argsForCall := fake.aroundTxUpdateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUpdateAroundTxInterceptor) AroundTxUpdateReturns(result1 storage.InterceptUpdateAroundTxFunc) {
	fake.aroundTxUpdateMutex.Lock()
	defer fake.aroundTxUpdateMutex.Unlock()
	fake.AroundTxUpdateStub = nil
	fake.aroundTxUpdateReturns = struct {
		result1 storage.InterceptUpdateAroundTxFunc
	}{result1}
}

func (fake *FakeUpdateAroundTxInterceptor) AroundTxUpdateReturnsOnCall(i int, result1 storage.InterceptUpdateAroundTxFunc) {
	fake.aroundTxUpdateMutex.Lock()
	defer fake.aroundTxUpdateMutex.Unlock()
	fake.AroundTxUpdateStub = nil
	if fake.aroundTxUpdateReturnsOnCall == nil {
		fake.aroundTxUpdateReturnsOnCall = make(map[int]struct {
			result1 storage.InterceptUpdateAroundTxFunc
		})
	}
	fake.aroundTxUpdateReturnsOnCall[i] = struct {
		result1 storage.InterceptUpdateAroundTxFunc
	}{result1}
}

func (fake *FakeUpdateAroundTxInterceptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aroundTxUpdateMutex.RLock()
	defer fake.aroundTxUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdateAroundTxInterceptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.UpdateAroundTxInterceptor = new(FakeUpdateAroundTxInterceptor)
