// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"sync"

	"github.com/Peripli/service-manager/storage"
)

type FakeStorage struct {
	OpenStub        func(uri string, encryptionKey []byte) error
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		uri           string
		encryptionKey []byte
	}
	openReturns struct {
		result1 error
	}
	openReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns     struct {
		result1 error
	}
	pingReturnsOnCall map[int]struct {
		result1 error
	}
	BrokerStub        func() storage.Broker
	brokerMutex       sync.RWMutex
	brokerArgsForCall []struct{}
	brokerReturns     struct {
		result1 storage.Broker
	}
	brokerReturnsOnCall map[int]struct {
		result1 storage.Broker
	}
	PlatformStub        func() storage.Platform
	platformMutex       sync.RWMutex
	platformArgsForCall []struct{}
	platformReturns     struct {
		result1 storage.Platform
	}
	platformReturnsOnCall map[int]struct {
		result1 storage.Platform
	}
	CredentialsStub        func() storage.Credentials
	credentialsMutex       sync.RWMutex
	credentialsArgsForCall []struct{}
	credentialsReturns     struct {
		result1 storage.Credentials
	}
	credentialsReturnsOnCall map[int]struct {
		result1 storage.Credentials
	}
	SecurityStub        func() storage.Security
	securityMutex       sync.RWMutex
	securityArgsForCall []struct{}
	securityReturns     struct {
		result1 storage.Security
	}
	securityReturnsOnCall map[int]struct {
		result1 storage.Security
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) Open(uri string, encryptionKey []byte) error {
	var encryptionKeyCopy []byte
	if encryptionKey != nil {
		encryptionKeyCopy = make([]byte, len(encryptionKey))
		copy(encryptionKeyCopy, encryptionKey)
	}
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		uri           string
		encryptionKey []byte
	}{uri, encryptionKeyCopy})
	fake.recordInvocation("Open", []interface{}{uri, encryptionKeyCopy})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(uri, encryptionKey)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.openReturns.result1
}

func (fake *FakeStorage) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeStorage) OpenArgsForCall(i int) (string, []byte) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].uri, fake.openArgsForCall[i].encryptionKey
}

func (fake *FakeStorage) OpenReturns(result1 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) OpenReturnsOnCall(i int, result1 error) {
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *FakeStorage) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeStorage) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Ping() error {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	fake.recordInvocation("Ping", []interface{}{})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pingReturns.result1
}

func (fake *FakeStorage) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeStorage) PingReturns(result1 error) {
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) PingReturnsOnCall(i int, result1 error) {
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Broker() storage.Broker {
	fake.brokerMutex.Lock()
	ret, specificReturn := fake.brokerReturnsOnCall[len(fake.brokerArgsForCall)]
	fake.brokerArgsForCall = append(fake.brokerArgsForCall, struct{}{})
	fake.recordInvocation("Broker", []interface{}{})
	fake.brokerMutex.Unlock()
	if fake.BrokerStub != nil {
		return fake.BrokerStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.brokerReturns.result1
}

func (fake *FakeStorage) BrokerCallCount() int {
	fake.brokerMutex.RLock()
	defer fake.brokerMutex.RUnlock()
	return len(fake.brokerArgsForCall)
}

func (fake *FakeStorage) BrokerReturns(result1 storage.Broker) {
	fake.BrokerStub = nil
	fake.brokerReturns = struct {
		result1 storage.Broker
	}{result1}
}

func (fake *FakeStorage) BrokerReturnsOnCall(i int, result1 storage.Broker) {
	fake.BrokerStub = nil
	if fake.brokerReturnsOnCall == nil {
		fake.brokerReturnsOnCall = make(map[int]struct {
			result1 storage.Broker
		})
	}
	fake.brokerReturnsOnCall[i] = struct {
		result1 storage.Broker
	}{result1}
}

func (fake *FakeStorage) Platform() storage.Platform {
	fake.platformMutex.Lock()
	ret, specificReturn := fake.platformReturnsOnCall[len(fake.platformArgsForCall)]
	fake.platformArgsForCall = append(fake.platformArgsForCall, struct{}{})
	fake.recordInvocation("Platform", []interface{}{})
	fake.platformMutex.Unlock()
	if fake.PlatformStub != nil {
		return fake.PlatformStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.platformReturns.result1
}

func (fake *FakeStorage) PlatformCallCount() int {
	fake.platformMutex.RLock()
	defer fake.platformMutex.RUnlock()
	return len(fake.platformArgsForCall)
}

func (fake *FakeStorage) PlatformReturns(result1 storage.Platform) {
	fake.PlatformStub = nil
	fake.platformReturns = struct {
		result1 storage.Platform
	}{result1}
}

func (fake *FakeStorage) PlatformReturnsOnCall(i int, result1 storage.Platform) {
	fake.PlatformStub = nil
	if fake.platformReturnsOnCall == nil {
		fake.platformReturnsOnCall = make(map[int]struct {
			result1 storage.Platform
		})
	}
	fake.platformReturnsOnCall[i] = struct {
		result1 storage.Platform
	}{result1}
}

func (fake *FakeStorage) Credentials() storage.Credentials {
	fake.credentialsMutex.Lock()
	ret, specificReturn := fake.credentialsReturnsOnCall[len(fake.credentialsArgsForCall)]
	fake.credentialsArgsForCall = append(fake.credentialsArgsForCall, struct{}{})
	fake.recordInvocation("Credentials", []interface{}{})
	fake.credentialsMutex.Unlock()
	if fake.CredentialsStub != nil {
		return fake.CredentialsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.credentialsReturns.result1
}

func (fake *FakeStorage) CredentialsCallCount() int {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return len(fake.credentialsArgsForCall)
}

func (fake *FakeStorage) CredentialsReturns(result1 storage.Credentials) {
	fake.CredentialsStub = nil
	fake.credentialsReturns = struct {
		result1 storage.Credentials
	}{result1}
}

func (fake *FakeStorage) CredentialsReturnsOnCall(i int, result1 storage.Credentials) {
	fake.CredentialsStub = nil
	if fake.credentialsReturnsOnCall == nil {
		fake.credentialsReturnsOnCall = make(map[int]struct {
			result1 storage.Credentials
		})
	}
	fake.credentialsReturnsOnCall[i] = struct {
		result1 storage.Credentials
	}{result1}
}

func (fake *FakeStorage) Security() storage.Security {
	fake.securityMutex.Lock()
	ret, specificReturn := fake.securityReturnsOnCall[len(fake.securityArgsForCall)]
	fake.securityArgsForCall = append(fake.securityArgsForCall, struct{}{})
	fake.recordInvocation("Security", []interface{}{})
	fake.securityMutex.Unlock()
	if fake.SecurityStub != nil {
		return fake.SecurityStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.securityReturns.result1
}

func (fake *FakeStorage) SecurityCallCount() int {
	fake.securityMutex.RLock()
	defer fake.securityMutex.RUnlock()
	return len(fake.securityArgsForCall)
}

func (fake *FakeStorage) SecurityReturns(result1 storage.Security) {
	fake.SecurityStub = nil
	fake.securityReturns = struct {
		result1 storage.Security
	}{result1}
}

func (fake *FakeStorage) SecurityReturnsOnCall(i int, result1 storage.Security) {
	fake.SecurityStub = nil
	if fake.securityReturnsOnCall == nil {
		fake.securityReturnsOnCall = make(map[int]struct {
			result1 storage.Security
		})
	}
	fake.securityReturnsOnCall[i] = struct {
		result1 storage.Security
	}{result1}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.brokerMutex.RLock()
	defer fake.brokerMutex.RUnlock()
	fake.platformMutex.RLock()
	defer fake.platformMutex.RUnlock()
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	fake.securityMutex.RLock()
	defer fake.securityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Storage = new(FakeStorage)
