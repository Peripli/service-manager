// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"sync"

	"github.com/Peripli/service-manager/storage"
)

type FakeCreateInterceptor struct {
	AroundTxCreateStub        func(storage.InterceptCreateAroundTxFunc) storage.InterceptCreateAroundTxFunc
	aroundTxCreateMutex       sync.RWMutex
	aroundTxCreateArgsForCall []struct {
		arg1 storage.InterceptCreateAroundTxFunc
	}
	aroundTxCreateReturns struct {
		result1 storage.InterceptCreateAroundTxFunc
	}
	aroundTxCreateReturnsOnCall map[int]struct {
		result1 storage.InterceptCreateAroundTxFunc
	}
	OnTxCreateStub        func(storage.InterceptCreateOnTxFunc) storage.InterceptCreateOnTxFunc
	onTxCreateMutex       sync.RWMutex
	onTxCreateArgsForCall []struct {
		arg1 storage.InterceptCreateOnTxFunc
	}
	onTxCreateReturns struct {
		result1 storage.InterceptCreateOnTxFunc
	}
	onTxCreateReturnsOnCall map[int]struct {
		result1 storage.InterceptCreateOnTxFunc
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateInterceptor) AroundTxCreate(arg1 storage.InterceptCreateAroundTxFunc) storage.InterceptCreateAroundTxFunc {
	fake.aroundTxCreateMutex.Lock()
	ret, specificReturn := fake.aroundTxCreateReturnsOnCall[len(fake.aroundTxCreateArgsForCall)]
	fake.aroundTxCreateArgsForCall = append(fake.aroundTxCreateArgsForCall, struct {
		arg1 storage.InterceptCreateAroundTxFunc
	}{arg1})
	fake.recordInvocation("AroundTxCreate", []interface{}{arg1})
	fake.aroundTxCreateMutex.Unlock()
	if fake.AroundTxCreateStub != nil {
		return fake.AroundTxCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.aroundTxCreateReturns
	return fakeReturns.result1
}

func (fake *FakeCreateInterceptor) AroundTxCreateCallCount() int {
	fake.aroundTxCreateMutex.RLock()
	defer fake.aroundTxCreateMutex.RUnlock()
	return len(fake.aroundTxCreateArgsForCall)
}

func (fake *FakeCreateInterceptor) AroundTxCreateCalls(stub func(storage.InterceptCreateAroundTxFunc) storage.InterceptCreateAroundTxFunc) {
	fake.aroundTxCreateMutex.Lock()
	defer fake.aroundTxCreateMutex.Unlock()
	fake.AroundTxCreateStub = stub
}

func (fake *FakeCreateInterceptor) AroundTxCreateArgsForCall(i int) storage.InterceptCreateAroundTxFunc {
	fake.aroundTxCreateMutex.RLock()
	defer fake.aroundTxCreateMutex.RUnlock()
	argsForCall := fake.aroundTxCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCreateInterceptor) AroundTxCreateReturns(result1 storage.InterceptCreateAroundTxFunc) {
	fake.aroundTxCreateMutex.Lock()
	defer fake.aroundTxCreateMutex.Unlock()
	fake.AroundTxCreateStub = nil
	fake.aroundTxCreateReturns = struct {
		result1 storage.InterceptCreateAroundTxFunc
	}{result1}
}

func (fake *FakeCreateInterceptor) AroundTxCreateReturnsOnCall(i int, result1 storage.InterceptCreateAroundTxFunc) {
	fake.aroundTxCreateMutex.Lock()
	defer fake.aroundTxCreateMutex.Unlock()
	fake.AroundTxCreateStub = nil
	if fake.aroundTxCreateReturnsOnCall == nil {
		fake.aroundTxCreateReturnsOnCall = make(map[int]struct {
			result1 storage.InterceptCreateAroundTxFunc
		})
	}
	fake.aroundTxCreateReturnsOnCall[i] = struct {
		result1 storage.InterceptCreateAroundTxFunc
	}{result1}
}

func (fake *FakeCreateInterceptor) OnTxCreate(arg1 storage.InterceptCreateOnTxFunc) storage.InterceptCreateOnTxFunc {
	fake.onTxCreateMutex.Lock()
	ret, specificReturn := fake.onTxCreateReturnsOnCall[len(fake.onTxCreateArgsForCall)]
	fake.onTxCreateArgsForCall = append(fake.onTxCreateArgsForCall, struct {
		arg1 storage.InterceptCreateOnTxFunc
	}{arg1})
	fake.recordInvocation("OnTxCreate", []interface{}{arg1})
	fake.onTxCreateMutex.Unlock()
	if fake.OnTxCreateStub != nil {
		return fake.OnTxCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.onTxCreateReturns
	return fakeReturns.result1
}

func (fake *FakeCreateInterceptor) OnTxCreateCallCount() int {
	fake.onTxCreateMutex.RLock()
	defer fake.onTxCreateMutex.RUnlock()
	return len(fake.onTxCreateArgsForCall)
}

func (fake *FakeCreateInterceptor) OnTxCreateCalls(stub func(storage.InterceptCreateOnTxFunc) storage.InterceptCreateOnTxFunc) {
	fake.onTxCreateMutex.Lock()
	defer fake.onTxCreateMutex.Unlock()
	fake.OnTxCreateStub = stub
}

func (fake *FakeCreateInterceptor) OnTxCreateArgsForCall(i int) storage.InterceptCreateOnTxFunc {
	fake.onTxCreateMutex.RLock()
	defer fake.onTxCreateMutex.RUnlock()
	argsForCall := fake.onTxCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCreateInterceptor) OnTxCreateReturns(result1 storage.InterceptCreateOnTxFunc) {
	fake.onTxCreateMutex.Lock()
	defer fake.onTxCreateMutex.Unlock()
	fake.OnTxCreateStub = nil
	fake.onTxCreateReturns = struct {
		result1 storage.InterceptCreateOnTxFunc
	}{result1}
}

func (fake *FakeCreateInterceptor) OnTxCreateReturnsOnCall(i int, result1 storage.InterceptCreateOnTxFunc) {
	fake.onTxCreateMutex.Lock()
	defer fake.onTxCreateMutex.Unlock()
	fake.OnTxCreateStub = nil
	if fake.onTxCreateReturnsOnCall == nil {
		fake.onTxCreateReturnsOnCall = make(map[int]struct {
			result1 storage.InterceptCreateOnTxFunc
		})
	}
	fake.onTxCreateReturnsOnCall[i] = struct {
		result1 storage.InterceptCreateOnTxFunc
	}{result1}
}

func (fake *FakeCreateInterceptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aroundTxCreateMutex.RLock()
	defer fake.aroundTxCreateMutex.RUnlock()
	fake.onTxCreateMutex.RLock()
	defer fake.onTxCreateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateInterceptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.CreateInterceptor = new(FakeCreateInterceptor)
