// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"sync"

	"github.com/Peripli/service-manager/storage"
)

type FakeDeleteInterceptor struct {
	AroundTxDeleteStub        func(storage.InterceptDeleteAroundTxFunc) storage.InterceptDeleteAroundTxFunc
	aroundTxDeleteMutex       sync.RWMutex
	aroundTxDeleteArgsForCall []struct {
		arg1 storage.InterceptDeleteAroundTxFunc
	}
	aroundTxDeleteReturns struct {
		result1 storage.InterceptDeleteAroundTxFunc
	}
	aroundTxDeleteReturnsOnCall map[int]struct {
		result1 storage.InterceptDeleteAroundTxFunc
	}
	OnTxDeleteStub        func(storage.InterceptDeleteOnTxFunc) storage.InterceptDeleteOnTxFunc
	onTxDeleteMutex       sync.RWMutex
	onTxDeleteArgsForCall []struct {
		arg1 storage.InterceptDeleteOnTxFunc
	}
	onTxDeleteReturns struct {
		result1 storage.InterceptDeleteOnTxFunc
	}
	onTxDeleteReturnsOnCall map[int]struct {
		result1 storage.InterceptDeleteOnTxFunc
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeleteInterceptor) AroundTxDelete(arg1 storage.InterceptDeleteAroundTxFunc) storage.InterceptDeleteAroundTxFunc {
	fake.aroundTxDeleteMutex.Lock()
	ret, specificReturn := fake.aroundTxDeleteReturnsOnCall[len(fake.aroundTxDeleteArgsForCall)]
	fake.aroundTxDeleteArgsForCall = append(fake.aroundTxDeleteArgsForCall, struct {
		arg1 storage.InterceptDeleteAroundTxFunc
	}{arg1})
	fake.recordInvocation("AroundTxDelete", []interface{}{arg1})
	fake.aroundTxDeleteMutex.Unlock()
	if fake.AroundTxDeleteStub != nil {
		return fake.AroundTxDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.aroundTxDeleteReturns
	return fakeReturns.result1
}

func (fake *FakeDeleteInterceptor) AroundTxDeleteCallCount() int {
	fake.aroundTxDeleteMutex.RLock()
	defer fake.aroundTxDeleteMutex.RUnlock()
	return len(fake.aroundTxDeleteArgsForCall)
}

func (fake *FakeDeleteInterceptor) AroundTxDeleteCalls(stub func(storage.InterceptDeleteAroundTxFunc) storage.InterceptDeleteAroundTxFunc) {
	fake.aroundTxDeleteMutex.Lock()
	defer fake.aroundTxDeleteMutex.Unlock()
	fake.AroundTxDeleteStub = stub
}

func (fake *FakeDeleteInterceptor) AroundTxDeleteArgsForCall(i int) storage.InterceptDeleteAroundTxFunc {
	fake.aroundTxDeleteMutex.RLock()
	defer fake.aroundTxDeleteMutex.RUnlock()
	argsForCall := fake.aroundTxDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeleteInterceptor) AroundTxDeleteReturns(result1 storage.InterceptDeleteAroundTxFunc) {
	fake.aroundTxDeleteMutex.Lock()
	defer fake.aroundTxDeleteMutex.Unlock()
	fake.AroundTxDeleteStub = nil
	fake.aroundTxDeleteReturns = struct {
		result1 storage.InterceptDeleteAroundTxFunc
	}{result1}
}

func (fake *FakeDeleteInterceptor) AroundTxDeleteReturnsOnCall(i int, result1 storage.InterceptDeleteAroundTxFunc) {
	fake.aroundTxDeleteMutex.Lock()
	defer fake.aroundTxDeleteMutex.Unlock()
	fake.AroundTxDeleteStub = nil
	if fake.aroundTxDeleteReturnsOnCall == nil {
		fake.aroundTxDeleteReturnsOnCall = make(map[int]struct {
			result1 storage.InterceptDeleteAroundTxFunc
		})
	}
	fake.aroundTxDeleteReturnsOnCall[i] = struct {
		result1 storage.InterceptDeleteAroundTxFunc
	}{result1}
}

func (fake *FakeDeleteInterceptor) OnTxDelete(arg1 storage.InterceptDeleteOnTxFunc) storage.InterceptDeleteOnTxFunc {
	fake.onTxDeleteMutex.Lock()
	ret, specificReturn := fake.onTxDeleteReturnsOnCall[len(fake.onTxDeleteArgsForCall)]
	fake.onTxDeleteArgsForCall = append(fake.onTxDeleteArgsForCall, struct {
		arg1 storage.InterceptDeleteOnTxFunc
	}{arg1})
	fake.recordInvocation("OnTxDelete", []interface{}{arg1})
	fake.onTxDeleteMutex.Unlock()
	if fake.OnTxDeleteStub != nil {
		return fake.OnTxDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.onTxDeleteReturns
	return fakeReturns.result1
}

func (fake *FakeDeleteInterceptor) OnTxDeleteCallCount() int {
	fake.onTxDeleteMutex.RLock()
	defer fake.onTxDeleteMutex.RUnlock()
	return len(fake.onTxDeleteArgsForCall)
}

func (fake *FakeDeleteInterceptor) OnTxDeleteCalls(stub func(storage.InterceptDeleteOnTxFunc) storage.InterceptDeleteOnTxFunc) {
	fake.onTxDeleteMutex.Lock()
	defer fake.onTxDeleteMutex.Unlock()
	fake.OnTxDeleteStub = stub
}

func (fake *FakeDeleteInterceptor) OnTxDeleteArgsForCall(i int) storage.InterceptDeleteOnTxFunc {
	fake.onTxDeleteMutex.RLock()
	defer fake.onTxDeleteMutex.RUnlock()
	argsForCall := fake.onTxDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeleteInterceptor) OnTxDeleteReturns(result1 storage.InterceptDeleteOnTxFunc) {
	fake.onTxDeleteMutex.Lock()
	defer fake.onTxDeleteMutex.Unlock()
	fake.OnTxDeleteStub = nil
	fake.onTxDeleteReturns = struct {
		result1 storage.InterceptDeleteOnTxFunc
	}{result1}
}

func (fake *FakeDeleteInterceptor) OnTxDeleteReturnsOnCall(i int, result1 storage.InterceptDeleteOnTxFunc) {
	fake.onTxDeleteMutex.Lock()
	defer fake.onTxDeleteMutex.Unlock()
	fake.OnTxDeleteStub = nil
	if fake.onTxDeleteReturnsOnCall == nil {
		fake.onTxDeleteReturnsOnCall = make(map[int]struct {
			result1 storage.InterceptDeleteOnTxFunc
		})
	}
	fake.onTxDeleteReturnsOnCall[i] = struct {
		result1 storage.InterceptDeleteOnTxFunc
	}{result1}
}

func (fake *FakeDeleteInterceptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aroundTxDeleteMutex.RLock()
	defer fake.aroundTxDeleteMutex.RUnlock()
	fake.onTxDeleteMutex.RLock()
	defer fake.onTxDeleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeleteInterceptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.DeleteInterceptor = new(FakeDeleteInterceptor)
