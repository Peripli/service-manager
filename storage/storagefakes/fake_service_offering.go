// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	context "context"
	sync "sync"

	types "github.com/Peripli/service-manager/pkg/types"
	storage "github.com/Peripli/service-manager/storage"
)

type FakeServiceOffering struct {
	CreateStub        func(context.Context, *types.ServiceOffering) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *types.ServiceOffering
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, string) (*types.ServiceOffering, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *types.ServiceOffering
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *types.ServiceOffering
		result2 error
	}
	ListStub        func(context.Context) ([]*types.ServiceOffering, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
	}
	listReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	ListByCatalogNameStub        func(context.Context, string) ([]*types.ServiceOffering, error)
	listByCatalogNameMutex       sync.RWMutex
	listByCatalogNameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	listByCatalogNameReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	listByCatalogNameReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	ListWithServicePlansByBrokerIDStub        func(context.Context, string) ([]*types.ServiceOffering, error)
	listWithServicePlansByBrokerIDMutex       sync.RWMutex
	listWithServicePlansByBrokerIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	listWithServicePlansByBrokerIDReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	listWithServicePlansByBrokerIDReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	UpdateStub        func(context.Context, *types.ServiceOffering) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *types.ServiceOffering
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceOffering) Create(arg1 context.Context, arg2 *types.ServiceOffering) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *types.ServiceOffering
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1
}

func (fake *FakeServiceOffering) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeServiceOffering) CreateCalls(stub func(context.Context, *types.ServiceOffering) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeServiceOffering) CreateArgsForCall(i int) (context.Context, *types.ServiceOffering) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceOffering) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) Delete(arg1 context.Context, arg2 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1
}

func (fake *FakeServiceOffering) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeServiceOffering) DeleteCalls(stub func(context.Context, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeServiceOffering) DeleteArgsForCall(i int) (context.Context, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceOffering) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) Get(arg1 context.Context, arg2 string) (*types.ServiceOffering, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceOffering) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeServiceOffering) GetCalls(stub func(context.Context, string) (*types.ServiceOffering, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeServiceOffering) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceOffering) GetReturns(result1 *types.ServiceOffering, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) GetReturnsOnCall(i int, result1 *types.ServiceOffering, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *types.ServiceOffering
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) List(arg1 context.Context) ([]*types.ServiceOffering, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("List", []interface{}{arg1})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceOffering) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeServiceOffering) ListCalls(stub func(context.Context) ([]*types.ServiceOffering, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeServiceOffering) ListArgsForCall(i int) context.Context {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceOffering) ListReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListByCatalogName(arg1 context.Context, arg2 string) ([]*types.ServiceOffering, error) {
	fake.listByCatalogNameMutex.Lock()
	ret, specificReturn := fake.listByCatalogNameReturnsOnCall[len(fake.listByCatalogNameArgsForCall)]
	fake.listByCatalogNameArgsForCall = append(fake.listByCatalogNameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ListByCatalogName", []interface{}{arg1, arg2})
	fake.listByCatalogNameMutex.Unlock()
	if fake.ListByCatalogNameStub != nil {
		return fake.ListByCatalogNameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listByCatalogNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceOffering) ListByCatalogNameCallCount() int {
	fake.listByCatalogNameMutex.RLock()
	defer fake.listByCatalogNameMutex.RUnlock()
	return len(fake.listByCatalogNameArgsForCall)
}

func (fake *FakeServiceOffering) ListByCatalogNameCalls(stub func(context.Context, string) ([]*types.ServiceOffering, error)) {
	fake.listByCatalogNameMutex.Lock()
	defer fake.listByCatalogNameMutex.Unlock()
	fake.ListByCatalogNameStub = stub
}

func (fake *FakeServiceOffering) ListByCatalogNameArgsForCall(i int) (context.Context, string) {
	fake.listByCatalogNameMutex.RLock()
	defer fake.listByCatalogNameMutex.RUnlock()
	argsForCall := fake.listByCatalogNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceOffering) ListByCatalogNameReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.listByCatalogNameMutex.Lock()
	defer fake.listByCatalogNameMutex.Unlock()
	fake.ListByCatalogNameStub = nil
	fake.listByCatalogNameReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListByCatalogNameReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.listByCatalogNameMutex.Lock()
	defer fake.listByCatalogNameMutex.Unlock()
	fake.ListByCatalogNameStub = nil
	if fake.listByCatalogNameReturnsOnCall == nil {
		fake.listByCatalogNameReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.listByCatalogNameReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerID(arg1 context.Context, arg2 string) ([]*types.ServiceOffering, error) {
	fake.listWithServicePlansByBrokerIDMutex.Lock()
	ret, specificReturn := fake.listWithServicePlansByBrokerIDReturnsOnCall[len(fake.listWithServicePlansByBrokerIDArgsForCall)]
	fake.listWithServicePlansByBrokerIDArgsForCall = append(fake.listWithServicePlansByBrokerIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ListWithServicePlansByBrokerID", []interface{}{arg1, arg2})
	fake.listWithServicePlansByBrokerIDMutex.Unlock()
	if fake.ListWithServicePlansByBrokerIDStub != nil {
		return fake.ListWithServicePlansByBrokerIDStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listWithServicePlansByBrokerIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDCallCount() int {
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	return len(fake.listWithServicePlansByBrokerIDArgsForCall)
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDCalls(stub func(context.Context, string) ([]*types.ServiceOffering, error)) {
	fake.listWithServicePlansByBrokerIDMutex.Lock()
	defer fake.listWithServicePlansByBrokerIDMutex.Unlock()
	fake.ListWithServicePlansByBrokerIDStub = stub
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDArgsForCall(i int) (context.Context, string) {
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	argsForCall := fake.listWithServicePlansByBrokerIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.listWithServicePlansByBrokerIDMutex.Lock()
	defer fake.listWithServicePlansByBrokerIDMutex.Unlock()
	fake.ListWithServicePlansByBrokerIDStub = nil
	fake.listWithServicePlansByBrokerIDReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.listWithServicePlansByBrokerIDMutex.Lock()
	defer fake.listWithServicePlansByBrokerIDMutex.Unlock()
	fake.ListWithServicePlansByBrokerIDStub = nil
	if fake.listWithServicePlansByBrokerIDReturnsOnCall == nil {
		fake.listWithServicePlansByBrokerIDReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.listWithServicePlansByBrokerIDReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) Update(arg1 context.Context, arg2 *types.ServiceOffering) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *types.ServiceOffering
	}{arg1, arg2})
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1
}

func (fake *FakeServiceOffering) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeServiceOffering) UpdateCalls(stub func(context.Context, *types.ServiceOffering) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeServiceOffering) UpdateArgsForCall(i int) (context.Context, *types.ServiceOffering) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceOffering) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.listByCatalogNameMutex.RLock()
	defer fake.listByCatalogNameMutex.RUnlock()
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceOffering) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.ServiceOffering = new(FakeServiceOffering)
