// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/pkg/types"
	"github.com/Peripli/service-manager/storage"
)

type FakeServiceOffering struct {
	ListWithServicePlansByBrokerIDStub        func(ctx context.Context, brokerID string) ([]*types.ServiceOffering, error)
	listWithServicePlansByBrokerIDMutex       sync.RWMutex
	listWithServicePlansByBrokerIDArgsForCall []struct {
		ctx      context.Context
		brokerID string
	}
	listWithServicePlansByBrokerIDReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	listWithServicePlansByBrokerIDReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerID(ctx context.Context, brokerID string) ([]*types.ServiceOffering, error) {
	fake.listWithServicePlansByBrokerIDMutex.Lock()
	ret, specificReturn := fake.listWithServicePlansByBrokerIDReturnsOnCall[len(fake.listWithServicePlansByBrokerIDArgsForCall)]
	fake.listWithServicePlansByBrokerIDArgsForCall = append(fake.listWithServicePlansByBrokerIDArgsForCall, struct {
		ctx      context.Context
		brokerID string
	}{ctx, brokerID})
	fake.recordInvocation("ListWithServicePlansByBrokerID", []interface{}{ctx, brokerID})
	fake.listWithServicePlansByBrokerIDMutex.Unlock()
	if fake.ListWithServicePlansByBrokerIDStub != nil {
		return fake.ListWithServicePlansByBrokerIDStub(ctx, brokerID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listWithServicePlansByBrokerIDReturns.result1, fake.listWithServicePlansByBrokerIDReturns.result2
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDCallCount() int {
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	return len(fake.listWithServicePlansByBrokerIDArgsForCall)
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDArgsForCall(i int) (context.Context, string) {
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	return fake.listWithServicePlansByBrokerIDArgsForCall[i].ctx, fake.listWithServicePlansByBrokerIDArgsForCall[i].brokerID
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.ListWithServicePlansByBrokerIDStub = nil
	fake.listWithServicePlansByBrokerIDReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.ListWithServicePlansByBrokerIDStub = nil
	if fake.listWithServicePlansByBrokerIDReturnsOnCall == nil {
		fake.listWithServicePlansByBrokerIDReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.listWithServicePlansByBrokerIDReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceOffering) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.ServiceOffering = new(FakeServiceOffering)
