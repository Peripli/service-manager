// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-manager/pkg/query"
	"github.com/Peripli/service-manager/pkg/types"
	"github.com/Peripli/service-manager/storage"
)

type FakeServiceOffering struct {
	CreateStub        func(ctx context.Context, serviceOffering *types.ServiceOffering) (string, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		ctx             context.Context
		serviceOffering *types.ServiceOffering
	}
	createReturns struct {
		result1 string
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetStub        func(ctx context.Context, id string) (*types.ServiceOffering, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		ctx context.Context
		id  string
	}
	getReturns struct {
		result1 *types.ServiceOffering
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *types.ServiceOffering
		result2 error
	}
	ListStub        func(ctx context.Context, criteria ...query.Criterion) ([]*types.ServiceOffering, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		ctx      context.Context
		criteria []query.Criterion
	}
	listReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	ListWithServicePlansByBrokerIDStub        func(ctx context.Context, brokerID string) ([]*types.ServiceOffering, error)
	listWithServicePlansByBrokerIDMutex       sync.RWMutex
	listWithServicePlansByBrokerIDArgsForCall []struct {
		ctx      context.Context
		brokerID string
	}
	listWithServicePlansByBrokerIDReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	listWithServicePlansByBrokerIDReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	DeleteStub        func(ctx context.Context, criteria ...query.Criterion) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		ctx      context.Context
		criteria []query.Criterion
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(ctx context.Context, serviceOffering *types.ServiceOffering) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		ctx             context.Context
		serviceOffering *types.ServiceOffering
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceOffering) Create(ctx context.Context, serviceOffering *types.ServiceOffering) (string, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		ctx             context.Context
		serviceOffering *types.ServiceOffering
	}{ctx, serviceOffering})
	fake.recordInvocation("Create", []interface{}{ctx, serviceOffering})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(ctx, serviceOffering)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeServiceOffering) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeServiceOffering) CreateArgsForCall(i int) (context.Context, *types.ServiceOffering) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].ctx, fake.createArgsForCall[i].serviceOffering
}

func (fake *FakeServiceOffering) CreateReturns(result1 string, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) CreateReturnsOnCall(i int, result1 string, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) Get(ctx context.Context, id string) (*types.ServiceOffering, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		ctx context.Context
		id  string
	}{ctx, id})
	fake.recordInvocation("Get", []interface{}{ctx, id})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(ctx, id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeServiceOffering) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeServiceOffering) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].ctx, fake.getArgsForCall[i].id
}

func (fake *FakeServiceOffering) GetReturns(result1 *types.ServiceOffering, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) GetReturnsOnCall(i int, result1 *types.ServiceOffering, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *types.ServiceOffering
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) List(ctx context.Context, criteria ...query.Criterion) ([]*types.ServiceOffering, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		ctx      context.Context
		criteria []query.Criterion
	}{ctx, criteria})
	fake.recordInvocation("List", []interface{}{ctx, criteria})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(ctx, criteria...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listReturns.result1, fake.listReturns.result2
}

func (fake *FakeServiceOffering) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeServiceOffering) ListArgsForCall(i int) (context.Context, []query.Criterion) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].ctx, fake.listArgsForCall[i].criteria
}

func (fake *FakeServiceOffering) ListReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerID(ctx context.Context, brokerID string) ([]*types.ServiceOffering, error) {
	fake.listWithServicePlansByBrokerIDMutex.Lock()
	ret, specificReturn := fake.listWithServicePlansByBrokerIDReturnsOnCall[len(fake.listWithServicePlansByBrokerIDArgsForCall)]
	fake.listWithServicePlansByBrokerIDArgsForCall = append(fake.listWithServicePlansByBrokerIDArgsForCall, struct {
		ctx      context.Context
		brokerID string
	}{ctx, brokerID})
	fake.recordInvocation("ListWithServicePlansByBrokerID", []interface{}{ctx, brokerID})
	fake.listWithServicePlansByBrokerIDMutex.Unlock()
	if fake.ListWithServicePlansByBrokerIDStub != nil {
		return fake.ListWithServicePlansByBrokerIDStub(ctx, brokerID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listWithServicePlansByBrokerIDReturns.result1, fake.listWithServicePlansByBrokerIDReturns.result2
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDCallCount() int {
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	return len(fake.listWithServicePlansByBrokerIDArgsForCall)
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDArgsForCall(i int) (context.Context, string) {
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	return fake.listWithServicePlansByBrokerIDArgsForCall[i].ctx, fake.listWithServicePlansByBrokerIDArgsForCall[i].brokerID
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.ListWithServicePlansByBrokerIDStub = nil
	fake.listWithServicePlansByBrokerIDReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) ListWithServicePlansByBrokerIDReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.ListWithServicePlansByBrokerIDStub = nil
	if fake.listWithServicePlansByBrokerIDReturnsOnCall == nil {
		fake.listWithServicePlansByBrokerIDReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.listWithServicePlansByBrokerIDReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceOffering) Delete(ctx context.Context, criteria ...query.Criterion) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		ctx      context.Context
		criteria []query.Criterion
	}{ctx, criteria})
	fake.recordInvocation("Delete", []interface{}{ctx, criteria})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(ctx, criteria...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeServiceOffering) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeServiceOffering) DeleteArgsForCall(i int) (context.Context, []query.Criterion) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].ctx, fake.deleteArgsForCall[i].criteria
}

func (fake *FakeServiceOffering) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) Update(ctx context.Context, serviceOffering *types.ServiceOffering) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		ctx             context.Context
		serviceOffering *types.ServiceOffering
	}{ctx, serviceOffering})
	fake.recordInvocation("Update", []interface{}{ctx, serviceOffering})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(ctx, serviceOffering)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeServiceOffering) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeServiceOffering) UpdateArgsForCall(i int) (context.Context, *types.ServiceOffering) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].ctx, fake.updateArgsForCall[i].serviceOffering
}

func (fake *FakeServiceOffering) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceOffering) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.listWithServicePlansByBrokerIDMutex.RLock()
	defer fake.listWithServicePlansByBrokerIDMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceOffering) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.ServiceOffering = new(FakeServiceOffering)
