// Code generated by counterfeiter. DO NOT EDIT.
package securityfakes

import (
	"sync"

	"github.com/Peripli/service-manager/security"
)

type FakeCredentialsTransformer struct {
	TransformStub        func(secret []byte) ([]byte, error)
	transformMutex       sync.RWMutex
	transformArgsForCall []struct {
		secret []byte
	}
	transformReturns struct {
		result1 []byte
		result2 error
	}
	transformReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ReverseStub        func(cipher []byte) ([]byte, error)
	reverseMutex       sync.RWMutex
	reverseArgsForCall []struct {
		cipher []byte
	}
	reverseReturns struct {
		result1 []byte
		result2 error
	}
	reverseReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentialsTransformer) Transform(secret []byte) ([]byte, error) {
	var secretCopy []byte
	if secret != nil {
		secretCopy = make([]byte, len(secret))
		copy(secretCopy, secret)
	}
	fake.transformMutex.Lock()
	ret, specificReturn := fake.transformReturnsOnCall[len(fake.transformArgsForCall)]
	fake.transformArgsForCall = append(fake.transformArgsForCall, struct {
		secret []byte
	}{secretCopy})
	fake.recordInvocation("Transform", []interface{}{secretCopy})
	fake.transformMutex.Unlock()
	if fake.TransformStub != nil {
		return fake.TransformStub(secret)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.transformReturns.result1, fake.transformReturns.result2
}

func (fake *FakeCredentialsTransformer) TransformCallCount() int {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	return len(fake.transformArgsForCall)
}

func (fake *FakeCredentialsTransformer) TransformArgsForCall(i int) []byte {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	return fake.transformArgsForCall[i].secret
}

func (fake *FakeCredentialsTransformer) TransformReturns(result1 []byte, result2 error) {
	fake.TransformStub = nil
	fake.transformReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialsTransformer) TransformReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.TransformStub = nil
	if fake.transformReturnsOnCall == nil {
		fake.transformReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.transformReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialsTransformer) Reverse(cipher []byte) ([]byte, error) {
	var cipherCopy []byte
	if cipher != nil {
		cipherCopy = make([]byte, len(cipher))
		copy(cipherCopy, cipher)
	}
	fake.reverseMutex.Lock()
	ret, specificReturn := fake.reverseReturnsOnCall[len(fake.reverseArgsForCall)]
	fake.reverseArgsForCall = append(fake.reverseArgsForCall, struct {
		cipher []byte
	}{cipherCopy})
	fake.recordInvocation("Reverse", []interface{}{cipherCopy})
	fake.reverseMutex.Unlock()
	if fake.ReverseStub != nil {
		return fake.ReverseStub(cipher)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.reverseReturns.result1, fake.reverseReturns.result2
}

func (fake *FakeCredentialsTransformer) ReverseCallCount() int {
	fake.reverseMutex.RLock()
	defer fake.reverseMutex.RUnlock()
	return len(fake.reverseArgsForCall)
}

func (fake *FakeCredentialsTransformer) ReverseArgsForCall(i int) []byte {
	fake.reverseMutex.RLock()
	defer fake.reverseMutex.RUnlock()
	return fake.reverseArgsForCall[i].cipher
}

func (fake *FakeCredentialsTransformer) ReverseReturns(result1 []byte, result2 error) {
	fake.ReverseStub = nil
	fake.reverseReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialsTransformer) ReverseReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.ReverseStub = nil
	if fake.reverseReturnsOnCall == nil {
		fake.reverseReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.reverseReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialsTransformer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	fake.reverseMutex.RLock()
	defer fake.reverseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredentialsTransformer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ security.CredentialsTransformer = new(FakeCredentialsTransformer)
